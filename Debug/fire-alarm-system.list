
fire-alarm-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004b60  08004b60  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b60  08004b60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000078  08004be0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08004be0  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d36  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a65  00000000  00000000  00028dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017935  00000000  00000000  0002b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb20  00000000  00000000  000432b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d81  00000000  00000000  0004edd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  000d5ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d54 	.word	0x08003d54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003d54 	.word	0x08003d54

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fec7 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8cd 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9c5 	bl	80004e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f919 	bl	8000394 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000162:	f000 f955 	bl	8000410 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000166:	f000 f991 	bl	800048c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800016a:	f000 fa97 	bl	800069c <SSD1306_Init>
  char str1[5], str2[6];

  SSD1306_GotoXY(0, 0);
 800016e:	2100      	movs	r1, #0
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fbfb 	bl	800096c <SSD1306_GotoXY>
  SSD1306_Puts("WELCOME", &Font_11x18, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	4953      	ldr	r1, [pc, #332]	; (80002c8 <main+0x17c>)
 800017a:	4854      	ldr	r0, [pc, #336]	; (80002cc <main+0x180>)
 800017c:	f000 fc8c 	bl	8000a98 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8000180:	211e      	movs	r1, #30
 8000182:	2000      	movs	r0, #0
 8000184:	f000 fbf2 	bl	800096c <SSD1306_GotoXY>
  SSD1306_Puts(" PTIT ", &Font_11x18, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	494f      	ldr	r1, [pc, #316]	; (80002c8 <main+0x17c>)
 800018c:	4850      	ldr	r0, [pc, #320]	; (80002d0 <main+0x184>)
 800018e:	f000 fc83 	bl	8000a98 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000192:	f000 fb47 	bl	8000824 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019a:	f000 ff05 	bl	8000fa8 <HAL_Delay>

  SSD1306_ScrollRight(0, 7);
 800019e:	2107      	movs	r1, #7
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 fa06 	bl	80005b2 <SSD1306_ScrollRight>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fefd 	bl	8000fa8 <HAL_Delay>
  SSD1306_ScrollLeft(0,7);
 80001ae:	2107      	movs	r1, #7
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 fa34 	bl	800061e <SSD1306_ScrollLeft>
  HAL_Delay(1000);
 80001b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ba:	f000 fef5 	bl	8000fa8 <HAL_Delay>
  SSD1306_Stopscroll();
 80001be:	f000 fa64 	bl	800068a <SSD1306_Stopscroll>
  SSD1306_Clear();
 80001c2:	f000 fc8e 	bl	8000ae2 <SSD1306_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80001c6:	4843      	ldr	r0, [pc, #268]	; (80002d4 <main+0x188>)
 80001c8:	f000 ffea 	bl	80011a0 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 80001cc:	4842      	ldr	r0, [pc, #264]	; (80002d8 <main+0x18c>)
 80001ce:	f000 ffe7 	bl	80011a0 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80001d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001d6:	483f      	ldr	r0, [pc, #252]	; (80002d4 <main+0x188>)
 80001d8:	f001 f890 	bl	80012fc <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, 1000);
 80001dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001e0:	483d      	ldr	r0, [pc, #244]	; (80002d8 <main+0x18c>)
 80001e2:	f001 f88b 	bl	80012fc <HAL_ADC_PollForConversion>

	  ADC_VAL_ALARM = HAL_ADC_GetValue(&hadc1);
 80001e6:	483b      	ldr	r0, [pc, #236]	; (80002d4 <main+0x188>)
 80001e8:	f001 f98e 	bl	8001508 <HAL_ADC_GetValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a3b      	ldr	r2, [pc, #236]	; (80002dc <main+0x190>)
 80001f0:	6013      	str	r3, [r2, #0]
	  ADC_VAL_GAS = HAL_ADC_GetValue(&hadc2);
 80001f2:	4839      	ldr	r0, [pc, #228]	; (80002d8 <main+0x18c>)
 80001f4:	f001 f988 	bl	8001508 <HAL_ADC_GetValue>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4a39      	ldr	r2, [pc, #228]	; (80002e0 <main+0x194>)
 80001fc:	6013      	str	r3, [r2, #0]

	  if (ADC_VAL_ALARM > 3500 || ADC_VAL_GAS > 2100)
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <main+0x190>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000206:	4293      	cmp	r3, r2
 8000208:	d805      	bhi.n	8000216 <main+0xca>
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <main+0x194>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f640 0234 	movw	r2, #2100	; 0x834
 8000212:	4293      	cmp	r3, r2
 8000214:	d90a      	bls.n	800022c <main+0xe0>
	  {
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000216:	2200      	movs	r2, #0
 8000218:	2120      	movs	r1, #32
 800021a:	4832      	ldr	r0, [pc, #200]	; (80002e4 <main+0x198>)
 800021c:	f001 fd7c 	bl	8001d18 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000220:	2201      	movs	r2, #1
 8000222:	2140      	movs	r1, #64	; 0x40
 8000224:	482f      	ldr	r0, [pc, #188]	; (80002e4 <main+0x198>)
 8000226:	f001 fd77 	bl	8001d18 <HAL_GPIO_WritePin>
 800022a:	e009      	b.n	8000240 <main+0xf4>
	  } else {
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800022c:	2201      	movs	r2, #1
 800022e:	2120      	movs	r1, #32
 8000230:	482c      	ldr	r0, [pc, #176]	; (80002e4 <main+0x198>)
 8000232:	f001 fd71 	bl	8001d18 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	482a      	ldr	r0, [pc, #168]	; (80002e4 <main+0x198>)
 800023c:	f001 fd6c 	bl	8001d18 <HAL_GPIO_WritePin>
	  }

	  int str1_size = (ADC_VAL_ALARM < 1000) ? 4 : 5;
 8000240:	4b26      	ldr	r3, [pc, #152]	; (80002dc <main+0x190>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000248:	d201      	bcs.n	800024e <main+0x102>
 800024a:	2304      	movs	r3, #4
 800024c:	e000      	b.n	8000250 <main+0x104>
 800024e:	2305      	movs	r3, #5
 8000250:	617b      	str	r3, [r7, #20]
	  int str2_size = (ADC_VAL_GAS < 1000) ? 4 : 5;
 8000252:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <main+0x194>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800025a:	d201      	bcs.n	8000260 <main+0x114>
 800025c:	2304      	movs	r3, #4
 800025e:	e000      	b.n	8000262 <main+0x116>
 8000260:	2305      	movs	r3, #5
 8000262:	613b      	str	r3, [r7, #16]

	  snprintf(str1, str1_size, "%u", ADC_VAL_ALARM);
 8000264:	6979      	ldr	r1, [r7, #20]
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <main+0x190>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f107 0008 	add.w	r0, r7, #8
 800026e:	4a1e      	ldr	r2, [pc, #120]	; (80002e8 <main+0x19c>)
 8000270:	f003 f8e2 	bl	8003438 <sniprintf>
	  snprintf(str2, str2_size, "%u", ADC_VAL_GAS);
 8000274:	6939      	ldr	r1, [r7, #16]
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <main+0x194>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4638      	mov	r0, r7
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <main+0x19c>)
 800027e:	f003 f8db 	bl	8003438 <sniprintf>

	  SSD1306_GotoXY(0, 0);
 8000282:	2100      	movs	r1, #0
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fb71 	bl	800096c <SSD1306_GotoXY>
	  SSD1306_Puts("HY026: ", &Font_11x18, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	490e      	ldr	r1, [pc, #56]	; (80002c8 <main+0x17c>)
 800028e:	4817      	ldr	r0, [pc, #92]	; (80002ec <main+0x1a0>)
 8000290:	f000 fc02 	bl	8000a98 <SSD1306_Puts>
	  SSD1306_Puts(str1, &Font_11x18, 1);
 8000294:	f107 0308 	add.w	r3, r7, #8
 8000298:	2201      	movs	r2, #1
 800029a:	490b      	ldr	r1, [pc, #44]	; (80002c8 <main+0x17c>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fbfb 	bl	8000a98 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 30);
 80002a2:	211e      	movs	r1, #30
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fb61 	bl	800096c <SSD1306_GotoXY>
	  SSD1306_Puts("GAS: ", &Font_11x18, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	4906      	ldr	r1, [pc, #24]	; (80002c8 <main+0x17c>)
 80002ae:	4810      	ldr	r0, [pc, #64]	; (80002f0 <main+0x1a4>)
 80002b0:	f000 fbf2 	bl	8000a98 <SSD1306_Puts>
	  SSD1306_Puts(str2, &Font_11x18, 1);
 80002b4:	463b      	mov	r3, r7
 80002b6:	2201      	movs	r2, #1
 80002b8:	4903      	ldr	r1, [pc, #12]	; (80002c8 <main+0x17c>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fbec 	bl	8000a98 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80002c0:	f000 fab0 	bl	8000824 <SSD1306_UpdateScreen>
  {
 80002c4:	e77f      	b.n	80001c6 <main+0x7a>
 80002c6:	bf00      	nop
 80002c8:	20000000 	.word	0x20000000
 80002cc:	08003d6c 	.word	0x08003d6c
 80002d0:	08003d74 	.word	0x08003d74
 80002d4:	20000094 	.word	0x20000094
 80002d8:	200000c4 	.word	0x200000c4
 80002dc:	20000148 	.word	0x20000148
 80002e0:	2000014c 	.word	0x2000014c
 80002e4:	40010800 	.word	0x40010800
 80002e8:	08003d7c 	.word	0x08003d7c
 80002ec:	08003d80 	.word	0x08003d80
 80002f0:	08003d88 	.word	0x08003d88

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	; 0x50
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 f890 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2310      	movs	r3, #16
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000338:	4618      	mov	r0, r3
 800033a:	f002 facf 	bl	80028dc <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000344:	f000 f930 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f002 fd3c 	bl	8002de0 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800036e:	f000 f91b 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000372:	2302      	movs	r3, #2
 8000374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f002 febd 	bl	80030fc <HAL_RCCEx_PeriphCLKConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000388:	f000 f90e 	bl	80005a8 <Error_Handler>
  }
}
 800038c:	bf00      	nop
 800038e:	3750      	adds	r7, #80	; 0x50
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_ADC1_Init+0x74>)
 80003a6:	4a19      	ldr	r2, [pc, #100]	; (800040c <MX_ADC1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_ADC1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_ADC1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_ADC1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_ADC1_Init+0x74>)
 80003be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_ADC1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_ADC1_Init+0x74>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <MX_ADC1_Init+0x74>)
 80003d2:	f000 fe0d 	bl	8000ff0 <HAL_ADC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003dc:	f000 f8e4 	bl	80005a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003e0:	2303      	movs	r3, #3
 80003e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_ADC1_Init+0x74>)
 80003f2:	f001 f895 	bl	8001520 <HAL_ADC_ConfigChannel>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003fc:	f000 f8d4 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000094 	.word	0x20000094
 800040c:	40012400 	.word	0x40012400

08000410 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_ADC2_Init+0x74>)
 8000422:	4a19      	ldr	r2, [pc, #100]	; (8000488 <MX_ADC2_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <MX_ADC2_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_ADC2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_ADC2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_ADC2_Init+0x74>)
 800043a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800043e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_ADC2_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_ADC2_Init+0x74>)
 8000448:	2201      	movs	r2, #1
 800044a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <MX_ADC2_Init+0x74>)
 800044e:	f000 fdcf 	bl	8000ff0 <HAL_ADC_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 f8a6 	bl	80005a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800045c:	2304      	movs	r3, #4
 800045e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000460:	2301      	movs	r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_ADC2_Init+0x74>)
 800046e:	f001 f857 	bl	8001520 <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000478:	f000 f896 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000c4 	.word	0x200000c4
 8000488:	40012800 	.word	0x40012800

0800048c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_I2C1_Init+0x50>)
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <MX_I2C1_Init+0x54>)
 8000494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_I2C1_Init+0x50>)
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_I2C1_Init+0x58>)
 800049a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_I2C1_Init+0x50>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_I2C1_Init+0x50>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_I2C1_Init+0x50>)
 80004aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_I2C1_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_I2C1_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <MX_I2C1_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_I2C1_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_I2C1_Init+0x50>)
 80004ca:	f001 fc3d 	bl	8001d48 <HAL_I2C_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004d4:	f000 f868 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000f4 	.word	0x200000f4
 80004e0:	40005400 	.word	0x40005400
 80004e4:	00061a80 	.word	0x00061a80

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xb4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a26      	ldr	r2, [pc, #152]	; (800059c <MX_GPIO_Init+0xb4>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_GPIO_Init+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_GPIO_Init+0xb4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_GPIO_Init+0xb4>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_GPIO_Init+0xb4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0xb4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <MX_GPIO_Init+0xb4>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_GPIO_Init+0xb4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4815      	ldr	r0, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xb8>)
 800054c:	f001 fbe4 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2160      	movs	r1, #96	; 0x60
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <MX_GPIO_Init+0xbc>)
 8000556:	f001 fbdf 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2302      	movs	r3, #2
 800056a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MX_GPIO_Init+0xb8>)
 8000574:	f001 fa4c 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000578:	2360      	movs	r3, #96	; 0x60
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_GPIO_Init+0xbc>)
 8000590:	f001 fa3e 	bl	8001a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	40011000 	.word	0x40011000
 80005a4:	40010800 	.word	0x40010800

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>

080005b2 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4603      	mov	r3, r0
 80005ba:	460a      	mov	r2, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80005c2:	2226      	movs	r2, #38	; 0x26
 80005c4:	2100      	movs	r1, #0
 80005c6:	2078      	movs	r0, #120	; 0x78
 80005c8:	f000 fb0e 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2078      	movs	r0, #120	; 0x78
 80005d2:	f000 fb09 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	461a      	mov	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	2078      	movs	r0, #120	; 0x78
 80005de:	f000 fb03 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2078      	movs	r0, #120	; 0x78
 80005e8:	f000 fafe 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	2078      	movs	r0, #120	; 0x78
 80005f4:	f000 faf8 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2078      	movs	r0, #120	; 0x78
 80005fe:	f000 faf3 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	2100      	movs	r1, #0
 8000606:	2078      	movs	r0, #120	; 0x78
 8000608:	f000 faee 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800060c:	222f      	movs	r2, #47	; 0x2f
 800060e:	2100      	movs	r1, #0
 8000610:	2078      	movs	r0, #120	; 0x78
 8000612:	f000 fae9 	bl	8000be8 <ssd1306_I2C_Write>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	460a      	mov	r2, r1
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	4613      	mov	r3, r2
 800062c:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800062e:	2227      	movs	r2, #39	; 0x27
 8000630:	2100      	movs	r1, #0
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 fad8 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2078      	movs	r0, #120	; 0x78
 800063e:	f000 fad3 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	461a      	mov	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	; 0x78
 800064a:	f000 facd 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 fac8 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	461a      	mov	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	; 0x78
 8000660:	f000 fac2 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	; 0x78
 800066a:	f000 fabd 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	2100      	movs	r1, #0
 8000672:	2078      	movs	r0, #120	; 0x78
 8000674:	f000 fab8 	bl	8000be8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000678:	222f      	movs	r2, #47	; 0x2f
 800067a:	2100      	movs	r1, #0
 800067c:	2078      	movs	r0, #120	; 0x78
 800067e:	f000 fab3 	bl	8000be8 <ssd1306_I2C_Write>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800068e:	222e      	movs	r2, #46	; 0x2e
 8000690:	2100      	movs	r1, #0
 8000692:	2078      	movs	r0, #120	; 0x78
 8000694:	f000 faa8 	bl	8000be8 <ssd1306_I2C_Write>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006a2:	f000 fa27 	bl	8000af4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006aa:	2201      	movs	r2, #1
 80006ac:	2178      	movs	r1, #120	; 0x78
 80006ae:	485b      	ldr	r0, [pc, #364]	; (800081c <SSD1306_Init+0x180>)
 80006b0:	f001 fd8c 	bl	80021cc <HAL_I2C_IsDeviceReady>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e0a9      	b.n	8000812 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80006be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006c4:	e002      	b.n	80006cc <SSD1306_Init+0x30>
		p--;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f9      	bne.n	80006c6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80006d2:	22ae      	movs	r2, #174	; 0xae
 80006d4:	2100      	movs	r1, #0
 80006d6:	2078      	movs	r0, #120	; 0x78
 80006d8:	f000 fa86 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80006dc:	2220      	movs	r2, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	2078      	movs	r0, #120	; 0x78
 80006e2:	f000 fa81 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006e6:	2210      	movs	r2, #16
 80006e8:	2100      	movs	r1, #0
 80006ea:	2078      	movs	r0, #120	; 0x78
 80006ec:	f000 fa7c 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006f0:	22b0      	movs	r2, #176	; 0xb0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2078      	movs	r0, #120	; 0x78
 80006f6:	f000 fa77 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80006fa:	22c8      	movs	r2, #200	; 0xc8
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	; 0x78
 8000700:	f000 fa72 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2078      	movs	r0, #120	; 0x78
 800070a:	f000 fa6d 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800070e:	2210      	movs	r2, #16
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	; 0x78
 8000714:	f000 fa68 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000718:	2240      	movs	r2, #64	; 0x40
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	; 0x78
 800071e:	f000 fa63 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000722:	2281      	movs	r2, #129	; 0x81
 8000724:	2100      	movs	r1, #0
 8000726:	2078      	movs	r0, #120	; 0x78
 8000728:	f000 fa5e 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	2100      	movs	r1, #0
 8000730:	2078      	movs	r0, #120	; 0x78
 8000732:	f000 fa59 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000736:	22a1      	movs	r2, #161	; 0xa1
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	; 0x78
 800073c:	f000 fa54 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000740:	22a6      	movs	r2, #166	; 0xa6
 8000742:	2100      	movs	r1, #0
 8000744:	2078      	movs	r0, #120	; 0x78
 8000746:	f000 fa4f 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800074a:	22a8      	movs	r2, #168	; 0xa8
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	; 0x78
 8000750:	f000 fa4a 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000754:	223f      	movs	r2, #63	; 0x3f
 8000756:	2100      	movs	r1, #0
 8000758:	2078      	movs	r0, #120	; 0x78
 800075a:	f000 fa45 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800075e:	22a4      	movs	r2, #164	; 0xa4
 8000760:	2100      	movs	r1, #0
 8000762:	2078      	movs	r0, #120	; 0x78
 8000764:	f000 fa40 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000768:	22d3      	movs	r2, #211	; 0xd3
 800076a:	2100      	movs	r1, #0
 800076c:	2078      	movs	r0, #120	; 0x78
 800076e:	f000 fa3b 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2078      	movs	r0, #120	; 0x78
 8000778:	f000 fa36 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800077c:	22d5      	movs	r2, #213	; 0xd5
 800077e:	2100      	movs	r1, #0
 8000780:	2078      	movs	r0, #120	; 0x78
 8000782:	f000 fa31 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000786:	22f0      	movs	r2, #240	; 0xf0
 8000788:	2100      	movs	r1, #0
 800078a:	2078      	movs	r0, #120	; 0x78
 800078c:	f000 fa2c 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000790:	22d9      	movs	r2, #217	; 0xd9
 8000792:	2100      	movs	r1, #0
 8000794:	2078      	movs	r0, #120	; 0x78
 8000796:	f000 fa27 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800079a:	2222      	movs	r2, #34	; 0x22
 800079c:	2100      	movs	r1, #0
 800079e:	2078      	movs	r0, #120	; 0x78
 80007a0:	f000 fa22 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007a4:	22da      	movs	r2, #218	; 0xda
 80007a6:	2100      	movs	r1, #0
 80007a8:	2078      	movs	r0, #120	; 0x78
 80007aa:	f000 fa1d 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007ae:	2212      	movs	r2, #18
 80007b0:	2100      	movs	r1, #0
 80007b2:	2078      	movs	r0, #120	; 0x78
 80007b4:	f000 fa18 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007b8:	22db      	movs	r2, #219	; 0xdb
 80007ba:	2100      	movs	r1, #0
 80007bc:	2078      	movs	r0, #120	; 0x78
 80007be:	f000 fa13 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	2078      	movs	r0, #120	; 0x78
 80007c8:	f000 fa0e 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007cc:	228d      	movs	r2, #141	; 0x8d
 80007ce:	2100      	movs	r1, #0
 80007d0:	2078      	movs	r0, #120	; 0x78
 80007d2:	f000 fa09 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80007d6:	2214      	movs	r2, #20
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	; 0x78
 80007dc:	f000 fa04 	bl	8000be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80007e0:	22af      	movs	r2, #175	; 0xaf
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	; 0x78
 80007e6:	f000 f9ff 	bl	8000be8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80007ea:	222e      	movs	r2, #46	; 0x2e
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	; 0x78
 80007f0:	f000 f9fa 	bl	8000be8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 f843 	bl	8000880 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80007fa:	f000 f813 	bl	8000824 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <SSD1306_Init+0x184>)
 8000800:	2200      	movs	r2, #0
 8000802:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SSD1306_Init+0x184>)
 8000806:	2200      	movs	r2, #0
 8000808:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SSD1306_Init+0x184>)
 800080c:	2201      	movs	r2, #1
 800080e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000f4 	.word	0x200000f4
 8000820:	20000550 	.word	0x20000550

08000824 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800082a:	2300      	movs	r3, #0
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	e01d      	b.n	800086c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	3b50      	subs	r3, #80	; 0x50
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	2078      	movs	r0, #120	; 0x78
 800083c:	f000 f9d4 	bl	8000be8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2078      	movs	r0, #120	; 0x78
 8000846:	f000 f9cf 	bl	8000be8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800084a:	2210      	movs	r2, #16
 800084c:	2100      	movs	r1, #0
 800084e:	2078      	movs	r0, #120	; 0x78
 8000850:	f000 f9ca 	bl	8000be8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	01db      	lsls	r3, r3, #7
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <SSD1306_UpdateScreen+0x58>)
 800085a:	441a      	add	r2, r3
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	2140      	movs	r1, #64	; 0x40
 8000860:	2078      	movs	r0, #120	; 0x78
 8000862:	f000 f95b 	bl	8000b1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3301      	adds	r3, #1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d9de      	bls.n	8000830 <SSD1306_UpdateScreen+0xc>
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000150 	.word	0x20000150

08000880 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <SSD1306_Fill+0x14>
 8000890:	2300      	movs	r3, #0
 8000892:	e000      	b.n	8000896 <SSD1306_Fill+0x16>
 8000894:	23ff      	movs	r3, #255	; 0xff
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	4619      	mov	r1, r3
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <SSD1306_Fill+0x2c>)
 800089e:	f002 fdc3 	bl	8003428 <memset>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000150 	.word	0x20000150

080008b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]
 80008ba:	460b      	mov	r3, r1
 80008bc:	80bb      	strh	r3, [r7, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	70fb      	strb	r3, [r7, #3]
	if (
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2b7f      	cmp	r3, #127	; 0x7f
 80008c6:	d848      	bhi.n	800095a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	2b3f      	cmp	r3, #63	; 0x3f
 80008cc:	d845      	bhi.n	800095a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SSD1306_DrawPixel+0xb4>)
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf0c      	ite	eq
 80008dc:	2301      	moveq	r3, #1
 80008de:	2300      	movne	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d11a      	bne.n	8000920 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	b298      	uxth	r0, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	01db      	lsls	r3, r3, #7
 80008f6:	4413      	add	r3, r2
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <SSD1306_DrawPixel+0xb8>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	b25b      	sxtb	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b259      	sxtb	r1, r3
 8000910:	88fa      	ldrh	r2, [r7, #6]
 8000912:	4603      	mov	r3, r0
 8000914:	01db      	lsls	r3, r3, #7
 8000916:	4413      	add	r3, r2
 8000918:	b2c9      	uxtb	r1, r1
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <SSD1306_DrawPixel+0xb8>)
 800091c:	54d1      	strb	r1, [r2, r3]
 800091e:	e01d      	b.n	800095c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000920:	88fa      	ldrh	r2, [r7, #6]
 8000922:	88bb      	ldrh	r3, [r7, #4]
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	b298      	uxth	r0, r3
 8000928:	4603      	mov	r3, r0
 800092a:	01db      	lsls	r3, r3, #7
 800092c:	4413      	add	r3, r2
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <SSD1306_DrawPixel+0xb8>)
 8000930:	5cd3      	ldrb	r3, [r2, r3]
 8000932:	b25a      	sxtb	r2, r3
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	2101      	movs	r1, #1
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	b25b      	sxtb	r3, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	b25b      	sxtb	r3, r3
 8000946:	4013      	ands	r3, r2
 8000948:	b259      	sxtb	r1, r3
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	01db      	lsls	r3, r3, #7
 8000950:	4413      	add	r3, r2
 8000952:	b2c9      	uxtb	r1, r1
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <SSD1306_DrawPixel+0xb8>)
 8000956:	54d1      	strb	r1, [r2, r3]
 8000958:	e000      	b.n	800095c <SSD1306_DrawPixel+0xac>
		return;
 800095a:	bf00      	nop
	}
}
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000550 	.word	0x20000550
 8000968:	20000150 	.word	0x20000150

0800096c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	80fb      	strh	r3, [r7, #6]
 8000978:	4613      	mov	r3, r2
 800097a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800097c:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SSD1306_GotoXY+0x28>)
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <SSD1306_GotoXY+0x28>)
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	8053      	strh	r3, [r2, #2]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000550 	.word	0x20000550

08000998 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009a8:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <SSD1306_Putc+0xfc>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
	if (
 80009b4:	2b7f      	cmp	r3, #127	; 0x7f
 80009b6:	dc07      	bgt.n	80009c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009b8:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <SSD1306_Putc+0xfc>)
 80009ba:	885b      	ldrh	r3, [r3, #2]
 80009bc:	461a      	mov	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009c4:	2b3f      	cmp	r3, #63	; 0x3f
 80009c6:	dd01      	ble.n	80009cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e05e      	b.n	8000a8a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e04b      	b.n	8000a6a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3b20      	subs	r3, #32
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	7849      	ldrb	r1, [r1, #1]
 80009de:	fb01 f303 	mul.w	r3, r1, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	440b      	add	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	e030      	b.n	8000a58 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d010      	beq.n	8000a28 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <SSD1306_Putc+0xfc>)
 8000a08:	881a      	ldrh	r2, [r3, #0]
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b298      	uxth	r0, r3
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <SSD1306_Putc+0xfc>)
 8000a14:	885a      	ldrh	r2, [r3, #2]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	79ba      	ldrb	r2, [r7, #6]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f7ff ff45 	bl	80008b0 <SSD1306_DrawPixel>
 8000a26:	e014      	b.n	8000a52 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <SSD1306_Putc+0xfc>)
 8000a2a:	881a      	ldrh	r2, [r3, #0]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b298      	uxth	r0, r3
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <SSD1306_Putc+0xfc>)
 8000a36:	885a      	ldrh	r2, [r3, #2]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f7ff ff2f 	bl	80008b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	3301      	adds	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d3c8      	bcc.n	80009f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3301      	adds	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d3ad      	bcc.n	80009d2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <SSD1306_Putc+0xfc>)
 8000a78:	881a      	ldrh	r2, [r3, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <SSD1306_Putc+0xfc>)
 8000a86:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000550 	.word	0x20000550

08000a98 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000aa6:	e012      	b.n	8000ace <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff71 	bl	8000998 <SSD1306_Putc>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d002      	beq.n	8000ac8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	e008      	b.n	8000ada <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e8      	bne.n	8000aa8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff feca 	bl	8000880 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000aec:	f7ff fe9a 	bl	8000824 <SSD1306_UpdateScreen>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ssd1306_I2C_Init+0x24>)
 8000afc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000afe:	e002      	b.n	8000b06 <ssd1306_I2C_Init+0x12>
		p--;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f9      	bne.n	8000b00 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	0003d090 	.word	0x0003d090

08000b1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b0c7      	sub	sp, #284	; 0x11c
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4604      	mov	r4, r0
 8000b24:	4608      	mov	r0, r1
 8000b26:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b2a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b2e:	600a      	str	r2, [r1, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b36:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b42:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b46:	4602      	mov	r2, r0
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b52:	460a      	mov	r2, r1
 8000b54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b62:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000b66:	7812      	ldrb	r2, [r2, #0]
 8000b68:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b70:	e015      	b.n	8000b9e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000b72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b76:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b7a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	441a      	add	r2, r3
 8000b82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b86:	3301      	adds	r3, #1
 8000b88:	7811      	ldrb	r1, [r2, #0]
 8000b8a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b8e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000b92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b94:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b98:	3301      	adds	r3, #1
 8000b9a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ba8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d8df      	bhi.n	8000b72 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bb6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b299      	uxth	r1, r3
 8000bbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	f107 020c 	add.w	r2, r7, #12
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	9000      	str	r0, [sp, #0]
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000bd6:	f001 f9fb 	bl	8001fd0 <HAL_I2C_Master_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	200000f4 	.word	0x200000f4

08000be8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000bfe:	797b      	ldrb	r3, [r7, #5]
 8000c00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	b299      	uxth	r1, r3
 8000c06:	f107 020c 	add.w	r2, r7, #12
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2302      	movs	r3, #2
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <ssd1306_I2C_Write+0x38>)
 8000c12:	f001 f9dd 	bl	8001fd0 <HAL_I2C_Master_Transmit>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000f4 	.word	0x200000f4

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6193      	str	r3, [r2, #24]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_MspInit+0x60>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_MspInit+0x60>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000

08000c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_ADC_MspInit+0xbc>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d122      	bne.n	8000cee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4819      	ldr	r0, [pc, #100]	; (8000d4c <HAL_ADC_MspInit+0xc4>)
 8000ce8:	f000 fe92 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cec:	e026      	b.n	8000d3c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_ADC_MspInit+0xc8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d121      	bne.n	8000d3c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_ADC_MspInit+0xc0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_ADC_MspInit+0xc4>)
 8000d38:	f000 fe6a 	bl	8001a10 <HAL_GPIO_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40012400 	.word	0x40012400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40012800 	.word	0x40012800

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_I2C_MspInit+0x70>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d123      	bne.n	8000dbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8c:	23c0      	movs	r3, #192	; 0xc0
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <HAL_I2C_MspInit+0x78>)
 8000da0:	f000 fe36 	bl	8001a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dae:	61d3      	str	r3, [r2, #28]
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e16:	f000 f8ab 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f002 fac0 	bl	80033d4 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20005000 	.word	0x20005000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000558 	.word	0x20000558
 8000e88:	20000570 	.word	0x20000570

08000e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e98:	f7ff fff8 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e9e:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eb4:	4c09      	ldr	r4, [pc, #36]	; (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 fa8d 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff f941 	bl	800014c <main>
  bx lr
 8000eca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ed4:	08004b68 	.word	0x08004b68
  ldr r2, =_sbss
 8000ed8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000edc:	20000570 	.word	0x20000570

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x28>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x28>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fd57 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fe90 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fd61 	bl	80019f6 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 fd37 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	2000055c 	.word	0x2000055c

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	2000055c 	.word	0x2000055c

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000010 	.word	0x20000010

08000ff0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0be      	b.n	8001190 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fe2a 	bl	8000c88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fbc5 	bl	80017c4 <ADC_ConversionStop_Disable>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 8099 	bne.w	800117e <HAL_ADC_Init+0x18e>
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 8095 	bne.w	800117e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105c:	f023 0302 	bic.w	r3, r3, #2
 8001060:	f043 0202 	orr.w	r2, r3, #2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001070:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b1b      	ldrb	r3, [r3, #12]
 8001076:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001078:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4313      	orrs	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001088:	d003      	beq.n	8001092 <HAL_ADC_Init+0xa2>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <HAL_ADC_Init+0xa8>
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	e000      	b.n	800109a <HAL_ADC_Init+0xaa>
 8001098:	2300      	movs	r3, #0
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7d1b      	ldrb	r3, [r3, #20]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d119      	bne.n	80010dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7b1b      	ldrb	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	035a      	lsls	r2, r3, #13
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e00b      	b.n	80010dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f043 0220 	orr.w	r2, r3, #32
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_ADC_Init+0x1a8>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	430b      	orrs	r3, r1
 8001102:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800110c:	d003      	beq.n	8001116 <HAL_ADC_Init+0x126>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d104      	bne.n	8001120 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	3b01      	subs	r3, #1
 800111c:	051b      	lsls	r3, r3, #20
 800111e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	430a      	orrs	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_Init+0x1ac>)
 800113c:	4013      	ands	r3, r2
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	429a      	cmp	r2, r3
 8001142:	d10b      	bne.n	800115c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800115a:	e018      	b.n	800118e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f023 0312 	bic.w	r3, r3, #18
 8001164:	f043 0210 	orr.w	r2, r3, #16
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800117c:	e007      	b.n	800118e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f043 0210 	orr.w	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	ffe1f7fd 	.word	0xffe1f7fd
 800119c:	ff1f0efe 	.word	0xff1f0efe

080011a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Start+0x1a>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e098      	b.n	80012ec <HAL_ADC_Start+0x14c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 faa4 	bl	8001710 <ADC_Enable>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 8087 	bne.w	80012e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <HAL_ADC_Start+0x154>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d105      	bne.n	80011fe <HAL_ADC_Start+0x5e>
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_ADC_Start+0x158>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d115      	bne.n	800122a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d026      	beq.n	8001266 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001220:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001228:	e01d      	b.n	8001266 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <HAL_ADC_Start+0x158>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d004      	beq.n	800124a <HAL_ADC_Start+0xaa>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <HAL_ADC_Start+0x154>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10d      	bne.n	8001266 <HAL_ADC_Start+0xc6>
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_ADC_Start+0x158>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800125e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f023 0206 	bic.w	r2, r3, #6
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
 800127e:	e002      	b.n	8001286 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f06f 0202 	mvn.w	r2, #2
 8001296:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012a6:	d113      	bne.n	80012d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_ADC_Start+0x154>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d105      	bne.n	80012be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_ADC_Start+0x158>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d108      	bne.n	80012d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	e00c      	b.n	80012ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	e003      	b.n	80012ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40012800 	.word	0x40012800
 80012f8:	40012400 	.word	0x40012400

080012fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001312:	f7ff fe3f 	bl	8000f94 <HAL_GetTick>
 8001316:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f043 0220 	orr.w	r2, r3, #32
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0d3      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d131      	bne.n	80013b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d12a      	bne.n	80013b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800135a:	e021      	b.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001362:	d01d      	beq.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <HAL_ADC_PollForConversion+0x7e>
 800136a:	f7ff fe13 	bl	8000f94 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d212      	bcs.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0a2      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0d6      	beq.n	800135c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ae:	e070      	b.n	8001492 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013b0:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <HAL_ADC_PollForConversion+0x1f4>)
 80013b2:	681c      	ldr	r4, [r3, #0]
 80013b4:	2002      	movs	r0, #2
 80013b6:	f001 ff57 	bl	8003268 <HAL_RCCEx_GetPeriphCLKFreq>
 80013ba:	4603      	mov	r3, r0
 80013bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <HAL_ADC_PollForConversion+0x1f8>)
 80013c8:	400b      	ands	r3, r1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <HAL_ADC_PollForConversion+0x104>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68d9      	ldr	r1, [r3, #12]
 80013d4:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_ADC_PollForConversion+0x1fc>)
 80013d6:	400b      	ands	r3, r1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <HAL_ADC_PollForConversion+0x104>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6919      	ldr	r1, [r3, #16]
 80013e2:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_ADC_PollForConversion+0x200>)
 80013e4:	400b      	ands	r3, r1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_ADC_PollForConversion+0x100>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_ADC_PollForConversion+0x204>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_PollForConversion+0x100>
 80013f8:	2314      	movs	r3, #20
 80013fa:	e020      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 80013fc:	2329      	movs	r3, #41	; 0x29
 80013fe:	e01e      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6919      	ldr	r1, [r3, #16]
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_ADC_PollForConversion+0x200>)
 8001408:	400b      	ands	r3, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_ADC_PollForConversion+0x120>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68d9      	ldr	r1, [r3, #12]
 8001414:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_ADC_PollForConversion+0x204>)
 8001416:	400b      	ands	r3, r1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_ADC_PollForConversion+0x13c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_ADC_PollForConversion+0x208>)
 8001424:	400b      	ands	r3, r1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d108      	bne.n	800143c <HAL_ADC_PollForConversion+0x140>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68d9      	ldr	r1, [r3, #12]
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_ADC_PollForConversion+0x208>)
 8001432:	400b      	ands	r3, r1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_PollForConversion+0x140>
 8001438:	2354      	movs	r3, #84	; 0x54
 800143a:	e000      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 800143c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001444:	e021      	b.n	800148a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01a      	beq.n	8001484 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_ADC_PollForConversion+0x168>
 8001454:	f7ff fd9e 	bl	8000f94 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d20f      	bcs.n	8001484 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d90b      	bls.n	8001484 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0204 	orr.w	r2, r3, #4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e030      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	429a      	cmp	r2, r3
 8001490:	d8d9      	bhi.n	8001446 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0212 	mvn.w	r2, #18
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014b6:	d115      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	24924924 	.word	0x24924924
 80014f8:	00924924 	.word	0x00924924
 80014fc:	12492492 	.word	0x12492492
 8001500:	00492492 	.word	0x00492492
 8001504:	00249249 	.word	0x00249249

08001508 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x20>
 800153c:	2302      	movs	r3, #2
 800153e:	e0dc      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1da>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d81c      	bhi.n	800158a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b05      	subs	r3, #5
 8001562:	221f      	movs	r2, #31
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b05      	subs	r3, #5
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34
 8001588:	e03c      	b.n	8001604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d81c      	bhi.n	80015cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	3b23      	subs	r3, #35	; 0x23
 80015a4:	221f      	movs	r2, #31
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4019      	ands	r1, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	; 0x23
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ca:	e01b      	b.n	8001604 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	3b41      	subs	r3, #65	; 0x41
 80015de:	221f      	movs	r2, #31
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4019      	ands	r1, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b41      	subs	r3, #65	; 0x41
 80015f8:	fa00 f203 	lsl.w	r2, r0, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d91c      	bls.n	8001646 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68d9      	ldr	r1, [r3, #12]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	3b1e      	subs	r3, #30
 800161e:	2207      	movs	r2, #7
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	4019      	ands	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6898      	ldr	r0, [r3, #8]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	3b1e      	subs	r3, #30
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	e019      	b.n	800167a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6919      	ldr	r1, [r3, #16]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	4019      	ands	r1, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6898      	ldr	r0, [r3, #8]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b10      	cmp	r3, #16
 8001680:	d003      	beq.n	800168a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001686:	2b11      	cmp	r3, #17
 8001688:	d132      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_ADC_ConfigChannel+0x1e4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d125      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d126      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d11a      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_ADC_ConfigChannel+0x1e8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_ADC_ConfigChannel+0x1ec>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x1b2>
 80016de:	e007      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f043 0220 	orr.w	r2, r3, #32
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40012400 	.word	0x40012400
 8001708:	20000008 	.word	0x20000008
 800170c:	431bde83 	.word	0x431bde83

08001710 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d040      	beq.n	80017b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <ADC_Enable+0xac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <ADC_Enable+0xb0>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800174c:	e002      	b.n	8001754 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3b01      	subs	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f9      	bne.n	800174e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800175a:	f7ff fc1b 	bl	8000f94 <HAL_GetTick>
 800175e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001760:	e01f      	b.n	80017a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001762:	f7ff fc17 	bl	8000f94 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d918      	bls.n	80017a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d011      	beq.n	80017a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f043 0210 	orr.w	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e007      	b.n	80017b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d1d8      	bne.n	8001762 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	431bde83 	.word	0x431bde83

080017c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d12e      	bne.n	800183c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ee:	f7ff fbd1 	bl	8000f94 <HAL_GetTick>
 80017f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017f4:	e01b      	b.n	800182e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017f6:	f7ff fbcd 	bl	8000f94 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d914      	bls.n	800182e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10d      	bne.n	800182e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f043 0210 	orr.w	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e007      	b.n	800183e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d0dc      	beq.n	80017f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff90 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff49 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff5e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff90 	bl	8001900 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5f 	bl	80018ac <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffb0 	bl	8001964 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	e169      	b.n	8001cf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a24:	2201      	movs	r2, #1
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8158 	bne.w	8001cf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a9a      	ldr	r2, [pc, #616]	; (8001cb0 <HAL_GPIO_Init+0x2a0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d05e      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a4c:	4a98      	ldr	r2, [pc, #608]	; (8001cb0 <HAL_GPIO_Init+0x2a0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d875      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a52:	4a98      	ldr	r2, [pc, #608]	; (8001cb4 <HAL_GPIO_Init+0x2a4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d058      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a58:	4a96      	ldr	r2, [pc, #600]	; (8001cb4 <HAL_GPIO_Init+0x2a4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d86f      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a5e:	4a96      	ldr	r2, [pc, #600]	; (8001cb8 <HAL_GPIO_Init+0x2a8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d052      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a64:	4a94      	ldr	r2, [pc, #592]	; (8001cb8 <HAL_GPIO_Init+0x2a8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d869      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a6a:	4a94      	ldr	r2, [pc, #592]	; (8001cbc <HAL_GPIO_Init+0x2ac>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d04c      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a70:	4a92      	ldr	r2, [pc, #584]	; (8001cbc <HAL_GPIO_Init+0x2ac>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d863      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a76:	4a92      	ldr	r2, [pc, #584]	; (8001cc0 <HAL_GPIO_Init+0x2b0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d046      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
 8001a7c:	4a90      	ldr	r2, [pc, #576]	; (8001cc0 <HAL_GPIO_Init+0x2b0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d85d      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a82:	2b12      	cmp	r3, #18
 8001a84:	d82a      	bhi.n	8001adc <HAL_GPIO_Init+0xcc>
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d859      	bhi.n	8001b3e <HAL_GPIO_Init+0x12e>
 8001a8a:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <HAL_GPIO_Init+0x80>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001b0b 	.word	0x08001b0b
 8001a94:	08001ae5 	.word	0x08001ae5
 8001a98:	08001af7 	.word	0x08001af7
 8001a9c:	08001b39 	.word	0x08001b39
 8001aa0:	08001b3f 	.word	0x08001b3f
 8001aa4:	08001b3f 	.word	0x08001b3f
 8001aa8:	08001b3f 	.word	0x08001b3f
 8001aac:	08001b3f 	.word	0x08001b3f
 8001ab0:	08001b3f 	.word	0x08001b3f
 8001ab4:	08001b3f 	.word	0x08001b3f
 8001ab8:	08001b3f 	.word	0x08001b3f
 8001abc:	08001b3f 	.word	0x08001b3f
 8001ac0:	08001b3f 	.word	0x08001b3f
 8001ac4:	08001b3f 	.word	0x08001b3f
 8001ac8:	08001b3f 	.word	0x08001b3f
 8001acc:	08001b3f 	.word	0x08001b3f
 8001ad0:	08001b3f 	.word	0x08001b3f
 8001ad4:	08001aed 	.word	0x08001aed
 8001ad8:	08001b01 	.word	0x08001b01
 8001adc:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <HAL_GPIO_Init+0x2b4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ae2:	e02c      	b.n	8001b3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e029      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	e024      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	3308      	adds	r3, #8
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e01f      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	330c      	adds	r3, #12
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e01a      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b12:	2304      	movs	r3, #4
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e013      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	611a      	str	r2, [r3, #16]
          break;
 8001b2a:	e009      	b.n	8001b40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	615a      	str	r2, [r3, #20]
          break;
 8001b36:	e003      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x130>
          break;
 8001b3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	d801      	bhi.n	8001b4a <HAL_GPIO_Init+0x13a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	e001      	b.n	8001b4e <HAL_GPIO_Init+0x13e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d802      	bhi.n	8001b5c <HAL_GPIO_Init+0x14c>
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x152>
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3b08      	subs	r3, #8
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	210f      	movs	r1, #15
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	6a39      	ldr	r1, [r7, #32]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80b1 	beq.w	8001cf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b90:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <HAL_GPIO_Init+0x2b8>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x2b8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ba8:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_GPIO_Init+0x2bc>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <HAL_GPIO_Init+0x2c0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <HAL_GPIO_Init+0x1ec>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3f      	ldr	r2, [pc, #252]	; (8001cd4 <HAL_GPIO_Init+0x2c4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00d      	beq.n	8001bf8 <HAL_GPIO_Init+0x1e8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3e      	ldr	r2, [pc, #248]	; (8001cd8 <HAL_GPIO_Init+0x2c8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d007      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3d      	ldr	r2, [pc, #244]	; (8001cdc <HAL_GPIO_Init+0x2cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_GPIO_Init+0x1e0>
 8001bec:	2303      	movs	r3, #3
 8001bee:	e006      	b.n	8001bfe <HAL_GPIO_Init+0x1ee>
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	e004      	b.n	8001bfe <HAL_GPIO_Init+0x1ee>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e002      	b.n	8001bfe <HAL_GPIO_Init+0x1ee>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_GPIO_Init+0x1ee>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c00:	f002 0203 	and.w	r2, r2, #3
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	4093      	lsls	r3, r2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c0e:	492f      	ldr	r1, [pc, #188]	; (8001ccc <HAL_GPIO_Init+0x2bc>)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	492c      	ldr	r1, [pc, #176]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4928      	ldr	r1, [pc, #160]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	491e      	ldr	r1, [pc, #120]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4918      	ldr	r1, [pc, #96]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4914      	ldr	r1, [pc, #80]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d021      	beq.n	8001ce4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	490e      	ldr	r1, [pc, #56]	; (8001ce0 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e021      	b.n	8001cf2 <HAL_GPIO_Init+0x2e2>
 8001cae:	bf00      	nop
 8001cb0:	10320000 	.word	0x10320000
 8001cb4:	10310000 	.word	0x10310000
 8001cb8:	10220000 	.word	0x10220000
 8001cbc:	10210000 	.word	0x10210000
 8001cc0:	10120000 	.word	0x10120000
 8001cc4:	10110000 	.word	0x10110000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	40010c00 	.word	0x40010c00
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	40011400 	.word	0x40011400
 8001ce0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4909      	ldr	r1, [pc, #36]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f ae8e 	bne.w	8001a24 <HAL_GPIO_Init+0x14>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	372c      	adds	r7, #44	; 0x2c
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	40010400 	.word	0x40010400

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e12b      	b.n	8001fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fff0 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	; 0x24
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dac:	f001 f960 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8001db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a81      	ldr	r2, [pc, #516]	; (8001fbc <HAL_I2C_Init+0x274>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d807      	bhi.n	8001dcc <HAL_I2C_Init+0x84>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a80      	ldr	r2, [pc, #512]	; (8001fc0 <HAL_I2C_Init+0x278>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e006      	b.n	8001dda <HAL_I2C_Init+0x92>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a7d      	ldr	r2, [pc, #500]	; (8001fc4 <HAL_I2C_Init+0x27c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bf94      	ite	ls
 8001dd4:	2301      	movls	r3, #1
 8001dd6:	2300      	movhi	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0e7      	b.n	8001fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a78      	ldr	r2, [pc, #480]	; (8001fc8 <HAL_I2C_Init+0x280>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0c9b      	lsrs	r3, r3, #18
 8001dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_I2C_Init+0x274>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d802      	bhi.n	8001e1c <HAL_I2C_Init+0xd4>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	e009      	b.n	8001e30 <HAL_I2C_Init+0xe8>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_I2C_Init+0x284>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	3301      	adds	r3, #1
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	495c      	ldr	r1, [pc, #368]	; (8001fbc <HAL_I2C_Init+0x274>)
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	d819      	bhi.n	8001e84 <HAL_I2C_Init+0x13c>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e59      	subs	r1, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5e:	1c59      	adds	r1, r3, #1
 8001e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e64:	400b      	ands	r3, r1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_I2C_Init+0x138>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e59      	subs	r1, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7e:	e051      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e04f      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d111      	bne.n	8001eb0 <HAL_I2C_Init+0x168>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e58      	subs	r0, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e012      	b.n	8001ed6 <HAL_I2C_Init+0x18e>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	0099      	lsls	r1, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Init+0x196>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e022      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10e      	bne.n	8001f04 <HAL_I2C_Init+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e58      	subs	r0, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f02:	e00f      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	6809      	ldr	r1, [r1, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6911      	ldr	r1, [r2, #16]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	000186a0 	.word	0x000186a0
 8001fc0:	001e847f 	.word	0x001e847f
 8001fc4:	003d08ff 	.word	0x003d08ff
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	10624dd3 	.word	0x10624dd3

08001fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	460b      	mov	r3, r1
 8001fde:	817b      	strh	r3, [r7, #10]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7fe ffd6 	bl	8000f94 <HAL_GetTick>
 8001fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 80e0 	bne.w	80021b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2319      	movs	r3, #25
 8001ffe:	2201      	movs	r2, #1
 8002000:	4970      	ldr	r1, [pc, #448]	; (80021c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fa92 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	e0d3      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x50>
 800201c:	2302      	movs	r3, #2
 800201e:	e0cc      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d007      	beq.n	8002046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2221      	movs	r2, #33	; 0x21
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2210      	movs	r2, #16
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	893a      	ldrh	r2, [r7, #8]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9ca 	bl	8002428 <I2C_MasterRequestWrite>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e08d      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020b4:	e066      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fb50 	bl	8002760 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d107      	bne.n	80020de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11b      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x188>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fb47 	bl	80027f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b04      	cmp	r3, #4
 800216e:	d107      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e01a      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d194      	bne.n	80020b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	00100002 	.word	0x00100002
 80021c8:	ffff0000 	.word	0xffff0000

080021cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7fe feda 	bl	8000f94 <HAL_GetTick>
 80021e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	f040 8111 	bne.w	8002416 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2319      	movs	r3, #25
 80021fa:	2201      	movs	r2, #1
 80021fc:	4988      	ldr	r1, [pc, #544]	; (8002420 <HAL_I2C_IsDeviceReady+0x254>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f994 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	e104      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_I2C_IsDeviceReady+0x50>
 8002218:	2302      	movs	r3, #2
 800221a:	e0fd      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d007      	beq.n	8002242 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2224      	movs	r2, #36	; 0x24
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a70      	ldr	r2, [pc, #448]	; (8002424 <HAL_I2C_IsDeviceReady+0x258>)
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f952 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d103      	bne.n	80022a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0b6      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fe6b 	bl	8000f94 <HAL_GetTick>
 80022be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ee:	e025      	b.n	800233c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7fe fe50 	bl	8000f94 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <HAL_I2C_IsDeviceReady+0x13a>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22a0      	movs	r2, #160	; 0xa0
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b02      	cmp	r3, #2
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2ba0      	cmp	r3, #160	; 0xa0
 8002346:	d005      	beq.n	8002354 <HAL_I2C_IsDeviceReady+0x188>
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_I2C_IsDeviceReady+0x188>
 800234e:	7dbb      	ldrb	r3, [r7, #22]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0cd      	beq.n	80022f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d129      	bne.n	80023be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	4921      	ldr	r1, [pc, #132]	; (8002420 <HAL_I2C_IsDeviceReady+0x254>)
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8c6 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e036      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e02c      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	490f      	ldr	r1, [pc, #60]	; (8002420 <HAL_I2C_IsDeviceReady+0x254>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8a2 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e012      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f4ff af32 	bcc.w	8002266 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000

08002428 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	460b      	mov	r3, r1
 8002436:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d006      	beq.n	8002452 <I2C_MasterRequestWrite+0x2a>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d003      	beq.n	8002452 <I2C_MasterRequestWrite+0x2a>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002450:	d108      	bne.n	8002464 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e00b      	b.n	800247c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	2b12      	cmp	r3, #18
 800246a:	d107      	bne.n	800247c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f84f 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a2:	d103      	bne.n	80024ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e035      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b8:	d108      	bne.n	80024cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024c8:	611a      	str	r2, [r3, #16]
 80024ca:	e01b      	b.n	8002504 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	11db      	asrs	r3, r3, #7
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0306 	and.w	r3, r3, #6
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f063 030f 	orn	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <I2C_MasterRequestWrite+0xfc>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f898 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e010      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <I2C_MasterRequestWrite+0x100>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f888 	bl	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010008 	.word	0x00010008
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e048      	b.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d044      	beq.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7fe fd25 	bl	8000f94 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d139      	bne.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10d      	bne.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	e00c      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	43da      	mvns	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d116      	bne.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e023      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	e00c      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	43da      	mvns	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4013      	ands	r3, r2
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d093      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800262e:	e071      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263e:	d123      	bne.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e067      	b.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d041      	beq.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7fe fc80 	bl	8000f94 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d136      	bne.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10c      	bne.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	e00b      	b.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e021      	b.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10c      	bne.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	43da      	mvns	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4013      	ands	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e00b      	b.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af6d 	bne.w	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276c:	e034      	b.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f886 	bl	8002880 <I2C_IsAcknowledgeFailed>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e034      	b.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d028      	beq.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe fc05 	bl	8000f94 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11d      	bne.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d016      	beq.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d1c3      	bne.n	800276e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027fc:	e034      	b.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f83e 	bl	8002880 <I2C_IsAcknowledgeFailed>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e034      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d028      	beq.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fe fbbd 	bl	8000f94 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d016      	beq.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d1c3      	bne.n	80027fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d11b      	bne.n	80028d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f043 0204 	orr.w	r2, r3, #4
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e272      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8087 	beq.w	8002a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b04      	cmp	r3, #4
 8002906:	d00c      	beq.n	8002922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002908:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d112      	bne.n	800293a <HAL_RCC_OscConfig+0x5e>
 8002914:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d10b      	bne.n	800293a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002922:	4b89      	ldr	r3, [pc, #548]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d06c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x12c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d168      	bne.n	8002a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e24c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x76>
 8002944:	4b80      	ldr	r3, [pc, #512]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a7f      	ldr	r2, [pc, #508]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	e02e      	b.n	80029b0 <HAL_RCC_OscConfig+0xd4>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x98>
 800295a:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a7a      	ldr	r2, [pc, #488]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b78      	ldr	r3, [pc, #480]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a77      	ldr	r2, [pc, #476]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800296c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e01d      	b.n	80029b0 <HAL_RCC_OscConfig+0xd4>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0xbc>
 800297e:	4b72      	ldr	r3, [pc, #456]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a71      	ldr	r2, [pc, #452]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0xd4>
 8002998:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe faec 	bl	8000f94 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fae8 	bl	8000f94 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e200      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0xe4>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fad8 	bl	8000f94 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fad4 	bl	8000f94 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1ec      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x10c>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d063      	beq.n	8002ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a16:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a22:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d11c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x18c>
 8002a2e:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d116      	bne.n	8002a68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x176>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e1c0      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4939      	ldr	r1, [pc, #228]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	e03a      	b.n	8002ade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fa8d 	bl	8000f94 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fa89 	bl	8000f94 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1a1      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4927      	ldr	r1, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fa6c 	bl	8000f94 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fa68 	bl	8000f94 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e180      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03a      	beq.n	8002b60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d019      	beq.n	8002b26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_RCC_OscConfig+0x274>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fa4c 	bl	8000f94 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe fa48 	bl	8000f94 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e160      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f000 face 	bl	80030c0 <RCC_Delay>
 8002b24:	e01c      	b.n	8002b60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_RCC_OscConfig+0x274>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fa32 	bl	8000f94 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b32:	e00f      	b.n	8002b54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fa2e 	bl	8000f94 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d908      	bls.n	8002b54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e146      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	42420000 	.word	0x42420000
 8002b50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e9      	bne.n	8002b34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a6 	beq.w	8002cba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a87      	ldr	r2, [pc, #540]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	61d3      	str	r3, [r2, #28]
 8002b8a:	4b85      	ldr	r3, [pc, #532]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x4c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x4c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7e      	ldr	r2, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x4c8>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe f9ef 	bl	8000f94 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe f9eb 	bl	8000f94 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e103      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x4c8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x312>
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6213      	str	r3, [r2, #32]
 8002bec:	e02d      	b.n	8002c4a <HAL_RCC_OscConfig+0x36e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x334>
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6213      	str	r3, [r2, #32]
 8002c0e:	e01c      	b.n	8002c4a <HAL_RCC_OscConfig+0x36e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x356>
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4a60      	ldr	r2, [pc, #384]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6213      	str	r3, [r2, #32]
 8002c24:	4b5e      	ldr	r3, [pc, #376]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4a5d      	ldr	r2, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6213      	str	r3, [r2, #32]
 8002c30:	e00b      	b.n	8002c4a <HAL_RCC_OscConfig+0x36e>
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a5a      	ldr	r2, [pc, #360]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6213      	str	r3, [r2, #32]
 8002c3e:	4b58      	ldr	r3, [pc, #352]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d015      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe f99f 	bl	8000f94 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe f99b 	bl	8000f94 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0b1      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCC_OscConfig+0x37e>
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f989 	bl	8000f94 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe f985 	bl	8000f94 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e09b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d105      	bne.n	8002cba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cae:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4a3b      	ldr	r2, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8087 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d061      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d146      	bne.n	8002d66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe f959 	bl	8000f94 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe f955 	bl	8000f94 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e06d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d108      	bne.n	8002d20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4921      	ldr	r1, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a19      	ldr	r1, [r3, #32]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	430b      	orrs	r3, r1
 8002d32:	491b      	ldr	r1, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f929 	bl	8000f94 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fe f925 	bl	8000f94 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e03d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x46a>
 8002d64:	e035      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_RCC_OscConfig+0x4cc>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f912 	bl	8000f94 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe f90e 	bl	8000f94 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e026      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x498>
 8002d92:	e01e      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e019      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
 8002da8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_OscConfig+0x500>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000

08002de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d0      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 0207 	bic.w	r2, r3, #7
 8002e0a:	4965      	ldr	r1, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d040      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d115      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e073      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06b      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4936      	ldr	r1, [pc, #216]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed0:	f7fe f860 	bl	8000f94 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fe f85c 	bl	8000f94 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e053      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d210      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0207 	bic.w	r2, r3, #7
 8002f16:	4922      	ldr	r1, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1cc>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd ffbe 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	08004aec 	.word	0x08004aec
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	2000000c 	.word	0x2000000c

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x36>
 8002fe2:	e027      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe6:	613b      	str	r3, [r7, #16]
      break;
 8002fe8:	e027      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0c9b      	lsrs	r3, r3, #18
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ff4:	5cd3      	ldrb	r3, [r2, r3]
 8002ff6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_GetSysClockFreq+0x94>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	0c5b      	lsrs	r3, r3, #17
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_RCC_GetSysClockFreq+0xa0>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_RCC_GetSysClockFreq+0x98>)
 8003016:	fb03 f202 	mul.w	r2, r3, r2
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e004      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	613b      	str	r3, [r7, #16]
      break;
 8003032:	e002      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetSysClockFreq+0x98>)
 8003036:	613b      	str	r3, [r7, #16]
      break;
 8003038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303a:	693b      	ldr	r3, [r7, #16]
}
 800303c:	4618      	mov	r0, r3
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	007a1200 	.word	0x007a1200
 8003050:	08004b04 	.word	0x08004b04
 8003054:	08004b14 	.word	0x08004b14
 8003058:	003d0900 	.word	0x003d0900

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <HAL_RCC_GetHCLKFreq+0x10>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	20000008 	.word	0x20000008

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003074:	f7ff fff2 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08004afc 	.word	0x08004afc

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800309c:	f7ff ffde 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08004afc 	.word	0x08004afc

080030c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <RCC_Delay+0x34>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <RCC_Delay+0x38>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a5b      	lsrs	r3, r3, #9
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030dc:	bf00      	nop
  }
  while (Delay --);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	60fa      	str	r2, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <RCC_Delay+0x1c>
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	20000008 	.word	0x20000008
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d07d      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003118:	2300      	movs	r3, #0
 800311a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4a4b      	ldr	r2, [pc, #300]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	61d3      	str	r3, [r2, #28]
 8003134:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b46      	ldr	r3, [pc, #280]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d118      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a42      	ldr	r2, [pc, #264]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315c:	f7fd ff1a 	bl	8000f94 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	e008      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fd ff16 	bl	8000f94 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e06d      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b3a      	ldr	r3, [pc, #232]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003182:	4b36      	ldr	r3, [pc, #216]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02e      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d027      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031aa:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031b6:	4a29      	ldr	r2, [pc, #164]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d014      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fee5 	bl	8000f94 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fee1 	bl	8000f94 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e036      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4917      	ldr	r1, [pc, #92]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	490b      	ldr	r1, [pc, #44]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
 8003264:	42420440 	.word	0x42420440

08003268 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b10      	cmp	r3, #16
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b10      	cmp	r3, #16
 800328e:	f200 808a 	bhi.w	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d045      	beq.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d075      	beq.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800329e:	e082      	b.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80032a0:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032a6:	4b45      	ldr	r3, [pc, #276]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d07b      	beq.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0c9b      	lsrs	r3, r3, #18
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	4a41      	ldr	r2, [pc, #260]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80032bc:	5cd3      	ldrb	r3, [r2, r3]
 80032be:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ca:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	0c5b      	lsrs	r3, r3, #17
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	4a3b      	ldr	r2, [pc, #236]	; (80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032e4:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4a34      	ldr	r2, [pc, #208]	; (80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003300:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d102      	bne.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	61bb      	str	r3, [r7, #24]
      break;
 8003312:	e04a      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
      break;
 8003322:	e042      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003324:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003334:	d108      	bne.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e01f      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003352:	d109      	bne.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003360:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	e00f      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003372:	d11c      	bne.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d016      	beq.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003380:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003384:	61bb      	str	r3, [r7, #24]
      break;
 8003386:	e012      	b.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003388:	e011      	b.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800338a:	f7ff fe85 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0b9b      	lsrs	r3, r3, #14
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	61bb      	str	r3, [r7, #24]
      break;
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033ae:	bf00      	nop
    }
  }
  return (frequency);
 80033b0:	69bb      	ldr	r3, [r7, #24]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08004b18 	.word	0x08004b18
 80033c4:	08004b28 	.word	0x08004b28
 80033c8:	007a1200 	.word	0x007a1200
 80033cc:	003d0900 	.word	0x003d0900
 80033d0:	aaaaaaab 	.word	0xaaaaaaab

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000014 	.word	0x20000014

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4d0c      	ldr	r5, [pc, #48]	; (8003418 <__libc_init_array+0x38>)
 80033e6:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	f000 fcb0 	bl	8003d54 <_init>
 80033f4:	2600      	movs	r6, #0
 80033f6:	4d0a      	ldr	r5, [pc, #40]	; (8003420 <__libc_init_array+0x40>)
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08004b60 	.word	0x08004b60
 800341c:	08004b60 	.word	0x08004b60
 8003420:	08004b60 	.word	0x08004b60
 8003424:	08004b64 	.word	0x08004b64

08003428 <memset>:
 8003428:	4603      	mov	r3, r0
 800342a:	4402      	add	r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <sniprintf>:
 8003438:	b40c      	push	{r2, r3}
 800343a:	b530      	push	{r4, r5, lr}
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <sniprintf+0x64>)
 800343e:	1e0c      	subs	r4, r1, #0
 8003440:	681d      	ldr	r5, [r3, #0]
 8003442:	b09d      	sub	sp, #116	; 0x74
 8003444:	da08      	bge.n	8003458 <sniprintf+0x20>
 8003446:	238b      	movs	r3, #139	; 0x8b
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	602b      	str	r3, [r5, #0]
 800344e:	b01d      	add	sp, #116	; 0x74
 8003450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003454:	b002      	add	sp, #8
 8003456:	4770      	bx	lr
 8003458:	f44f 7302 	mov.w	r3, #520	; 0x208
 800345c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003460:	bf0c      	ite	eq
 8003462:	4623      	moveq	r3, r4
 8003464:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003468:	9304      	str	r3, [sp, #16]
 800346a:	9307      	str	r3, [sp, #28]
 800346c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003470:	9002      	str	r0, [sp, #8]
 8003472:	9006      	str	r0, [sp, #24]
 8003474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003478:	4628      	mov	r0, r5
 800347a:	ab21      	add	r3, sp, #132	; 0x84
 800347c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800347e:	a902      	add	r1, sp, #8
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	f000 f869 	bl	8003558 <_svfiprintf_r>
 8003486:	1c43      	adds	r3, r0, #1
 8003488:	bfbc      	itt	lt
 800348a:	238b      	movlt	r3, #139	; 0x8b
 800348c:	602b      	strlt	r3, [r5, #0]
 800348e:	2c00      	cmp	r4, #0
 8003490:	d0dd      	beq.n	800344e <sniprintf+0x16>
 8003492:	2200      	movs	r2, #0
 8003494:	9b02      	ldr	r3, [sp, #8]
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e7d9      	b.n	800344e <sniprintf+0x16>
 800349a:	bf00      	nop
 800349c:	20000014 	.word	0x20000014

080034a0 <__ssputs_r>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	688e      	ldr	r6, [r1, #8]
 80034a6:	4682      	mov	sl, r0
 80034a8:	429e      	cmp	r6, r3
 80034aa:	460c      	mov	r4, r1
 80034ac:	4690      	mov	r8, r2
 80034ae:	461f      	mov	r7, r3
 80034b0:	d838      	bhi.n	8003524 <__ssputs_r+0x84>
 80034b2:	898a      	ldrh	r2, [r1, #12]
 80034b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034b8:	d032      	beq.n	8003520 <__ssputs_r+0x80>
 80034ba:	6825      	ldr	r5, [r4, #0]
 80034bc:	6909      	ldr	r1, [r1, #16]
 80034be:	3301      	adds	r3, #1
 80034c0:	eba5 0901 	sub.w	r9, r5, r1
 80034c4:	6965      	ldr	r5, [r4, #20]
 80034c6:	444b      	add	r3, r9
 80034c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034d0:	106d      	asrs	r5, r5, #1
 80034d2:	429d      	cmp	r5, r3
 80034d4:	bf38      	it	cc
 80034d6:	461d      	movcc	r5, r3
 80034d8:	0553      	lsls	r3, r2, #21
 80034da:	d531      	bpl.n	8003540 <__ssputs_r+0xa0>
 80034dc:	4629      	mov	r1, r5
 80034de:	f000 fb6f 	bl	8003bc0 <_malloc_r>
 80034e2:	4606      	mov	r6, r0
 80034e4:	b950      	cbnz	r0, 80034fc <__ssputs_r+0x5c>
 80034e6:	230c      	movs	r3, #12
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f8ca 3000 	str.w	r3, [sl]
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f6:	81a3      	strh	r3, [r4, #12]
 80034f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fc:	464a      	mov	r2, r9
 80034fe:	6921      	ldr	r1, [r4, #16]
 8003500:	f000 face 	bl	8003aa0 <memcpy>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800350a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350e:	81a3      	strh	r3, [r4, #12]
 8003510:	6126      	str	r6, [r4, #16]
 8003512:	444e      	add	r6, r9
 8003514:	6026      	str	r6, [r4, #0]
 8003516:	463e      	mov	r6, r7
 8003518:	6165      	str	r5, [r4, #20]
 800351a:	eba5 0509 	sub.w	r5, r5, r9
 800351e:	60a5      	str	r5, [r4, #8]
 8003520:	42be      	cmp	r6, r7
 8003522:	d900      	bls.n	8003526 <__ssputs_r+0x86>
 8003524:	463e      	mov	r6, r7
 8003526:	4632      	mov	r2, r6
 8003528:	4641      	mov	r1, r8
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f000 fac6 	bl	8003abc <memmove>
 8003530:	68a3      	ldr	r3, [r4, #8]
 8003532:	2000      	movs	r0, #0
 8003534:	1b9b      	subs	r3, r3, r6
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	4433      	add	r3, r6
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	e7db      	b.n	80034f8 <__ssputs_r+0x58>
 8003540:	462a      	mov	r2, r5
 8003542:	f000 fbb1 	bl	8003ca8 <_realloc_r>
 8003546:	4606      	mov	r6, r0
 8003548:	2800      	cmp	r0, #0
 800354a:	d1e1      	bne.n	8003510 <__ssputs_r+0x70>
 800354c:	4650      	mov	r0, sl
 800354e:	6921      	ldr	r1, [r4, #16]
 8003550:	f000 face 	bl	8003af0 <_free_r>
 8003554:	e7c7      	b.n	80034e6 <__ssputs_r+0x46>
	...

08003558 <_svfiprintf_r>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	4698      	mov	r8, r3
 800355e:	898b      	ldrh	r3, [r1, #12]
 8003560:	4607      	mov	r7, r0
 8003562:	061b      	lsls	r3, r3, #24
 8003564:	460d      	mov	r5, r1
 8003566:	4614      	mov	r4, r2
 8003568:	b09d      	sub	sp, #116	; 0x74
 800356a:	d50e      	bpl.n	800358a <_svfiprintf_r+0x32>
 800356c:	690b      	ldr	r3, [r1, #16]
 800356e:	b963      	cbnz	r3, 800358a <_svfiprintf_r+0x32>
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	f000 fb25 	bl	8003bc0 <_malloc_r>
 8003576:	6028      	str	r0, [r5, #0]
 8003578:	6128      	str	r0, [r5, #16]
 800357a:	b920      	cbnz	r0, 8003586 <_svfiprintf_r+0x2e>
 800357c:	230c      	movs	r3, #12
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	e0d1      	b.n	800372a <_svfiprintf_r+0x1d2>
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	616b      	str	r3, [r5, #20]
 800358a:	2300      	movs	r3, #0
 800358c:	9309      	str	r3, [sp, #36]	; 0x24
 800358e:	2320      	movs	r3, #32
 8003590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003594:	2330      	movs	r3, #48	; 0x30
 8003596:	f04f 0901 	mov.w	r9, #1
 800359a:	f8cd 800c 	str.w	r8, [sp, #12]
 800359e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003744 <_svfiprintf_r+0x1ec>
 80035a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035a6:	4623      	mov	r3, r4
 80035a8:	469a      	mov	sl, r3
 80035aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ae:	b10a      	cbz	r2, 80035b4 <_svfiprintf_r+0x5c>
 80035b0:	2a25      	cmp	r2, #37	; 0x25
 80035b2:	d1f9      	bne.n	80035a8 <_svfiprintf_r+0x50>
 80035b4:	ebba 0b04 	subs.w	fp, sl, r4
 80035b8:	d00b      	beq.n	80035d2 <_svfiprintf_r+0x7a>
 80035ba:	465b      	mov	r3, fp
 80035bc:	4622      	mov	r2, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff ff6d 	bl	80034a0 <__ssputs_r>
 80035c6:	3001      	adds	r0, #1
 80035c8:	f000 80aa 	beq.w	8003720 <_svfiprintf_r+0x1c8>
 80035cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ce:	445a      	add	r2, fp
 80035d0:	9209      	str	r2, [sp, #36]	; 0x24
 80035d2:	f89a 3000 	ldrb.w	r3, [sl]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80a2 	beq.w	8003720 <_svfiprintf_r+0x1c8>
 80035dc:	2300      	movs	r3, #0
 80035de:	f04f 32ff 	mov.w	r2, #4294967295
 80035e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035e6:	f10a 0a01 	add.w	sl, sl, #1
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	9307      	str	r3, [sp, #28]
 80035ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035f2:	931a      	str	r3, [sp, #104]	; 0x68
 80035f4:	4654      	mov	r4, sl
 80035f6:	2205      	movs	r2, #5
 80035f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fc:	4851      	ldr	r0, [pc, #324]	; (8003744 <_svfiprintf_r+0x1ec>)
 80035fe:	f000 fa41 	bl	8003a84 <memchr>
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	b9d8      	cbnz	r0, 800363e <_svfiprintf_r+0xe6>
 8003606:	06d0      	lsls	r0, r2, #27
 8003608:	bf44      	itt	mi
 800360a:	2320      	movmi	r3, #32
 800360c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003610:	0711      	lsls	r1, r2, #28
 8003612:	bf44      	itt	mi
 8003614:	232b      	movmi	r3, #43	; 0x2b
 8003616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800361a:	f89a 3000 	ldrb.w	r3, [sl]
 800361e:	2b2a      	cmp	r3, #42	; 0x2a
 8003620:	d015      	beq.n	800364e <_svfiprintf_r+0xf6>
 8003622:	4654      	mov	r4, sl
 8003624:	2000      	movs	r0, #0
 8003626:	f04f 0c0a 	mov.w	ip, #10
 800362a:	9a07      	ldr	r2, [sp, #28]
 800362c:	4621      	mov	r1, r4
 800362e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003632:	3b30      	subs	r3, #48	; 0x30
 8003634:	2b09      	cmp	r3, #9
 8003636:	d94e      	bls.n	80036d6 <_svfiprintf_r+0x17e>
 8003638:	b1b0      	cbz	r0, 8003668 <_svfiprintf_r+0x110>
 800363a:	9207      	str	r2, [sp, #28]
 800363c:	e014      	b.n	8003668 <_svfiprintf_r+0x110>
 800363e:	eba0 0308 	sub.w	r3, r0, r8
 8003642:	fa09 f303 	lsl.w	r3, r9, r3
 8003646:	4313      	orrs	r3, r2
 8003648:	46a2      	mov	sl, r4
 800364a:	9304      	str	r3, [sp, #16]
 800364c:	e7d2      	b.n	80035f4 <_svfiprintf_r+0x9c>
 800364e:	9b03      	ldr	r3, [sp, #12]
 8003650:	1d19      	adds	r1, r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	9103      	str	r1, [sp, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfbb      	ittet	lt
 800365a:	425b      	neglt	r3, r3
 800365c:	f042 0202 	orrlt.w	r2, r2, #2
 8003660:	9307      	strge	r3, [sp, #28]
 8003662:	9307      	strlt	r3, [sp, #28]
 8003664:	bfb8      	it	lt
 8003666:	9204      	strlt	r2, [sp, #16]
 8003668:	7823      	ldrb	r3, [r4, #0]
 800366a:	2b2e      	cmp	r3, #46	; 0x2e
 800366c:	d10c      	bne.n	8003688 <_svfiprintf_r+0x130>
 800366e:	7863      	ldrb	r3, [r4, #1]
 8003670:	2b2a      	cmp	r3, #42	; 0x2a
 8003672:	d135      	bne.n	80036e0 <_svfiprintf_r+0x188>
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	3402      	adds	r4, #2
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	9203      	str	r2, [sp, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfb8      	it	lt
 8003682:	f04f 33ff 	movlt.w	r3, #4294967295
 8003686:	9305      	str	r3, [sp, #20]
 8003688:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003748 <_svfiprintf_r+0x1f0>
 800368c:	2203      	movs	r2, #3
 800368e:	4650      	mov	r0, sl
 8003690:	7821      	ldrb	r1, [r4, #0]
 8003692:	f000 f9f7 	bl	8003a84 <memchr>
 8003696:	b140      	cbz	r0, 80036aa <_svfiprintf_r+0x152>
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	eba0 000a 	sub.w	r0, r0, sl
 800369e:	fa03 f000 	lsl.w	r0, r3, r0
 80036a2:	9b04      	ldr	r3, [sp, #16]
 80036a4:	3401      	adds	r4, #1
 80036a6:	4303      	orrs	r3, r0
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ae:	2206      	movs	r2, #6
 80036b0:	4826      	ldr	r0, [pc, #152]	; (800374c <_svfiprintf_r+0x1f4>)
 80036b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036b6:	f000 f9e5 	bl	8003a84 <memchr>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d038      	beq.n	8003730 <_svfiprintf_r+0x1d8>
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <_svfiprintf_r+0x1f8>)
 80036c0:	bb1b      	cbnz	r3, 800370a <_svfiprintf_r+0x1b2>
 80036c2:	9b03      	ldr	r3, [sp, #12]
 80036c4:	3307      	adds	r3, #7
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	3308      	adds	r3, #8
 80036cc:	9303      	str	r3, [sp, #12]
 80036ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d0:	4433      	add	r3, r6
 80036d2:	9309      	str	r3, [sp, #36]	; 0x24
 80036d4:	e767      	b.n	80035a6 <_svfiprintf_r+0x4e>
 80036d6:	460c      	mov	r4, r1
 80036d8:	2001      	movs	r0, #1
 80036da:	fb0c 3202 	mla	r2, ip, r2, r3
 80036de:	e7a5      	b.n	800362c <_svfiprintf_r+0xd4>
 80036e0:	2300      	movs	r3, #0
 80036e2:	f04f 0c0a 	mov.w	ip, #10
 80036e6:	4619      	mov	r1, r3
 80036e8:	3401      	adds	r4, #1
 80036ea:	9305      	str	r3, [sp, #20]
 80036ec:	4620      	mov	r0, r4
 80036ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f2:	3a30      	subs	r2, #48	; 0x30
 80036f4:	2a09      	cmp	r2, #9
 80036f6:	d903      	bls.n	8003700 <_svfiprintf_r+0x1a8>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0c5      	beq.n	8003688 <_svfiprintf_r+0x130>
 80036fc:	9105      	str	r1, [sp, #20]
 80036fe:	e7c3      	b.n	8003688 <_svfiprintf_r+0x130>
 8003700:	4604      	mov	r4, r0
 8003702:	2301      	movs	r3, #1
 8003704:	fb0c 2101 	mla	r1, ip, r1, r2
 8003708:	e7f0      	b.n	80036ec <_svfiprintf_r+0x194>
 800370a:	ab03      	add	r3, sp, #12
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	462a      	mov	r2, r5
 8003710:	4638      	mov	r0, r7
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_svfiprintf_r+0x1fc>)
 8003714:	a904      	add	r1, sp, #16
 8003716:	f3af 8000 	nop.w
 800371a:	1c42      	adds	r2, r0, #1
 800371c:	4606      	mov	r6, r0
 800371e:	d1d6      	bne.n	80036ce <_svfiprintf_r+0x176>
 8003720:	89ab      	ldrh	r3, [r5, #12]
 8003722:	065b      	lsls	r3, r3, #25
 8003724:	f53f af2c 	bmi.w	8003580 <_svfiprintf_r+0x28>
 8003728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800372a:	b01d      	add	sp, #116	; 0x74
 800372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003730:	ab03      	add	r3, sp, #12
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	462a      	mov	r2, r5
 8003736:	4638      	mov	r0, r7
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <_svfiprintf_r+0x1fc>)
 800373a:	a904      	add	r1, sp, #16
 800373c:	f000 f87c 	bl	8003838 <_printf_i>
 8003740:	e7eb      	b.n	800371a <_svfiprintf_r+0x1c2>
 8003742:	bf00      	nop
 8003744:	08004b2a 	.word	0x08004b2a
 8003748:	08004b30 	.word	0x08004b30
 800374c:	08004b34 	.word	0x08004b34
 8003750:	00000000 	.word	0x00000000
 8003754:	080034a1 	.word	0x080034a1

08003758 <_printf_common>:
 8003758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	4616      	mov	r6, r2
 800375e:	4699      	mov	r9, r3
 8003760:	688a      	ldr	r2, [r1, #8]
 8003762:	690b      	ldr	r3, [r1, #16]
 8003764:	4607      	mov	r7, r0
 8003766:	4293      	cmp	r3, r2
 8003768:	bfb8      	it	lt
 800376a:	4613      	movlt	r3, r2
 800376c:	6033      	str	r3, [r6, #0]
 800376e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003772:	460c      	mov	r4, r1
 8003774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003778:	b10a      	cbz	r2, 800377e <_printf_common+0x26>
 800377a:	3301      	adds	r3, #1
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	0699      	lsls	r1, r3, #26
 8003782:	bf42      	ittt	mi
 8003784:	6833      	ldrmi	r3, [r6, #0]
 8003786:	3302      	addmi	r3, #2
 8003788:	6033      	strmi	r3, [r6, #0]
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	f015 0506 	ands.w	r5, r5, #6
 8003790:	d106      	bne.n	80037a0 <_printf_common+0x48>
 8003792:	f104 0a19 	add.w	sl, r4, #25
 8003796:	68e3      	ldr	r3, [r4, #12]
 8003798:	6832      	ldr	r2, [r6, #0]
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	42ab      	cmp	r3, r5
 800379e:	dc28      	bgt.n	80037f2 <_printf_common+0x9a>
 80037a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037a4:	1e13      	subs	r3, r2, #0
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	bf18      	it	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	0692      	lsls	r2, r2, #26
 80037ae:	d42d      	bmi.n	800380c <_printf_common+0xb4>
 80037b0:	4649      	mov	r1, r9
 80037b2:	4638      	mov	r0, r7
 80037b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037b8:	47c0      	blx	r8
 80037ba:	3001      	adds	r0, #1
 80037bc:	d020      	beq.n	8003800 <_printf_common+0xa8>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	68e5      	ldr	r5, [r4, #12]
 80037c2:	f003 0306 	and.w	r3, r3, #6
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf18      	it	ne
 80037ca:	2500      	movne	r5, #0
 80037cc:	6832      	ldr	r2, [r6, #0]
 80037ce:	f04f 0600 	mov.w	r6, #0
 80037d2:	68a3      	ldr	r3, [r4, #8]
 80037d4:	bf08      	it	eq
 80037d6:	1aad      	subeq	r5, r5, r2
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	bf08      	it	eq
 80037dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bfc4      	itt	gt
 80037e4:	1a9b      	subgt	r3, r3, r2
 80037e6:	18ed      	addgt	r5, r5, r3
 80037e8:	341a      	adds	r4, #26
 80037ea:	42b5      	cmp	r5, r6
 80037ec:	d11a      	bne.n	8003824 <_printf_common+0xcc>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e008      	b.n	8003804 <_printf_common+0xac>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4652      	mov	r2, sl
 80037f6:	4649      	mov	r1, r9
 80037f8:	4638      	mov	r0, r7
 80037fa:	47c0      	blx	r8
 80037fc:	3001      	adds	r0, #1
 80037fe:	d103      	bne.n	8003808 <_printf_common+0xb0>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003808:	3501      	adds	r5, #1
 800380a:	e7c4      	b.n	8003796 <_printf_common+0x3e>
 800380c:	2030      	movs	r0, #48	; 0x30
 800380e:	18e1      	adds	r1, r4, r3
 8003810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800381a:	4422      	add	r2, r4
 800381c:	3302      	adds	r3, #2
 800381e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003822:	e7c5      	b.n	80037b0 <_printf_common+0x58>
 8003824:	2301      	movs	r3, #1
 8003826:	4622      	mov	r2, r4
 8003828:	4649      	mov	r1, r9
 800382a:	4638      	mov	r0, r7
 800382c:	47c0      	blx	r8
 800382e:	3001      	adds	r0, #1
 8003830:	d0e6      	beq.n	8003800 <_printf_common+0xa8>
 8003832:	3601      	adds	r6, #1
 8003834:	e7d9      	b.n	80037ea <_printf_common+0x92>
	...

08003838 <_printf_i>:
 8003838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	7e0f      	ldrb	r7, [r1, #24]
 800383e:	4691      	mov	r9, r2
 8003840:	2f78      	cmp	r7, #120	; 0x78
 8003842:	4680      	mov	r8, r0
 8003844:	460c      	mov	r4, r1
 8003846:	469a      	mov	sl, r3
 8003848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800384a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800384e:	d807      	bhi.n	8003860 <_printf_i+0x28>
 8003850:	2f62      	cmp	r7, #98	; 0x62
 8003852:	d80a      	bhi.n	800386a <_printf_i+0x32>
 8003854:	2f00      	cmp	r7, #0
 8003856:	f000 80d9 	beq.w	8003a0c <_printf_i+0x1d4>
 800385a:	2f58      	cmp	r7, #88	; 0x58
 800385c:	f000 80a4 	beq.w	80039a8 <_printf_i+0x170>
 8003860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003868:	e03a      	b.n	80038e0 <_printf_i+0xa8>
 800386a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800386e:	2b15      	cmp	r3, #21
 8003870:	d8f6      	bhi.n	8003860 <_printf_i+0x28>
 8003872:	a101      	add	r1, pc, #4	; (adr r1, 8003878 <_printf_i+0x40>)
 8003874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003878:	080038d1 	.word	0x080038d1
 800387c:	080038e5 	.word	0x080038e5
 8003880:	08003861 	.word	0x08003861
 8003884:	08003861 	.word	0x08003861
 8003888:	08003861 	.word	0x08003861
 800388c:	08003861 	.word	0x08003861
 8003890:	080038e5 	.word	0x080038e5
 8003894:	08003861 	.word	0x08003861
 8003898:	08003861 	.word	0x08003861
 800389c:	08003861 	.word	0x08003861
 80038a0:	08003861 	.word	0x08003861
 80038a4:	080039f3 	.word	0x080039f3
 80038a8:	08003915 	.word	0x08003915
 80038ac:	080039d5 	.word	0x080039d5
 80038b0:	08003861 	.word	0x08003861
 80038b4:	08003861 	.word	0x08003861
 80038b8:	08003a15 	.word	0x08003a15
 80038bc:	08003861 	.word	0x08003861
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003861 	.word	0x08003861
 80038c8:	08003861 	.word	0x08003861
 80038cc:	080039dd 	.word	0x080039dd
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	1d1a      	adds	r2, r3, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	602a      	str	r2, [r5, #0]
 80038d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0a4      	b.n	8003a2e <_printf_i+0x1f6>
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	6829      	ldr	r1, [r5, #0]
 80038e8:	0606      	lsls	r6, r0, #24
 80038ea:	f101 0304 	add.w	r3, r1, #4
 80038ee:	d50a      	bpl.n	8003906 <_printf_i+0xce>
 80038f0:	680e      	ldr	r6, [r1, #0]
 80038f2:	602b      	str	r3, [r5, #0]
 80038f4:	2e00      	cmp	r6, #0
 80038f6:	da03      	bge.n	8003900 <_printf_i+0xc8>
 80038f8:	232d      	movs	r3, #45	; 0x2d
 80038fa:	4276      	negs	r6, r6
 80038fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003900:	230a      	movs	r3, #10
 8003902:	485e      	ldr	r0, [pc, #376]	; (8003a7c <_printf_i+0x244>)
 8003904:	e019      	b.n	800393a <_printf_i+0x102>
 8003906:	680e      	ldr	r6, [r1, #0]
 8003908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800390c:	602b      	str	r3, [r5, #0]
 800390e:	bf18      	it	ne
 8003910:	b236      	sxthne	r6, r6
 8003912:	e7ef      	b.n	80038f4 <_printf_i+0xbc>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1d19      	adds	r1, r3, #4
 800391a:	6029      	str	r1, [r5, #0]
 800391c:	0601      	lsls	r1, r0, #24
 800391e:	d501      	bpl.n	8003924 <_printf_i+0xec>
 8003920:	681e      	ldr	r6, [r3, #0]
 8003922:	e002      	b.n	800392a <_printf_i+0xf2>
 8003924:	0646      	lsls	r6, r0, #25
 8003926:	d5fb      	bpl.n	8003920 <_printf_i+0xe8>
 8003928:	881e      	ldrh	r6, [r3, #0]
 800392a:	2f6f      	cmp	r7, #111	; 0x6f
 800392c:	bf0c      	ite	eq
 800392e:	2308      	moveq	r3, #8
 8003930:	230a      	movne	r3, #10
 8003932:	4852      	ldr	r0, [pc, #328]	; (8003a7c <_printf_i+0x244>)
 8003934:	2100      	movs	r1, #0
 8003936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800393a:	6865      	ldr	r5, [r4, #4]
 800393c:	2d00      	cmp	r5, #0
 800393e:	bfa8      	it	ge
 8003940:	6821      	ldrge	r1, [r4, #0]
 8003942:	60a5      	str	r5, [r4, #8]
 8003944:	bfa4      	itt	ge
 8003946:	f021 0104 	bicge.w	r1, r1, #4
 800394a:	6021      	strge	r1, [r4, #0]
 800394c:	b90e      	cbnz	r6, 8003952 <_printf_i+0x11a>
 800394e:	2d00      	cmp	r5, #0
 8003950:	d04d      	beq.n	80039ee <_printf_i+0x1b6>
 8003952:	4615      	mov	r5, r2
 8003954:	fbb6 f1f3 	udiv	r1, r6, r3
 8003958:	fb03 6711 	mls	r7, r3, r1, r6
 800395c:	5dc7      	ldrb	r7, [r0, r7]
 800395e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003962:	4637      	mov	r7, r6
 8003964:	42bb      	cmp	r3, r7
 8003966:	460e      	mov	r6, r1
 8003968:	d9f4      	bls.n	8003954 <_printf_i+0x11c>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d10b      	bne.n	8003986 <_printf_i+0x14e>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	07de      	lsls	r6, r3, #31
 8003972:	d508      	bpl.n	8003986 <_printf_i+0x14e>
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	6861      	ldr	r1, [r4, #4]
 8003978:	4299      	cmp	r1, r3
 800397a:	bfde      	ittt	le
 800397c:	2330      	movle	r3, #48	; 0x30
 800397e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003986:	1b52      	subs	r2, r2, r5
 8003988:	6122      	str	r2, [r4, #16]
 800398a:	464b      	mov	r3, r9
 800398c:	4621      	mov	r1, r4
 800398e:	4640      	mov	r0, r8
 8003990:	f8cd a000 	str.w	sl, [sp]
 8003994:	aa03      	add	r2, sp, #12
 8003996:	f7ff fedf 	bl	8003758 <_printf_common>
 800399a:	3001      	adds	r0, #1
 800399c:	d14c      	bne.n	8003a38 <_printf_i+0x200>
 800399e:	f04f 30ff 	mov.w	r0, #4294967295
 80039a2:	b004      	add	sp, #16
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	4834      	ldr	r0, [pc, #208]	; (8003a7c <_printf_i+0x244>)
 80039aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039ae:	6829      	ldr	r1, [r5, #0]
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80039b6:	6029      	str	r1, [r5, #0]
 80039b8:	061d      	lsls	r5, r3, #24
 80039ba:	d514      	bpl.n	80039e6 <_printf_i+0x1ae>
 80039bc:	07df      	lsls	r7, r3, #31
 80039be:	bf44      	itt	mi
 80039c0:	f043 0320 	orrmi.w	r3, r3, #32
 80039c4:	6023      	strmi	r3, [r4, #0]
 80039c6:	b91e      	cbnz	r6, 80039d0 <_printf_i+0x198>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	f023 0320 	bic.w	r3, r3, #32
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	2310      	movs	r3, #16
 80039d2:	e7af      	b.n	8003934 <_printf_i+0xfc>
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	f043 0320 	orr.w	r3, r3, #32
 80039da:	6023      	str	r3, [r4, #0]
 80039dc:	2378      	movs	r3, #120	; 0x78
 80039de:	4828      	ldr	r0, [pc, #160]	; (8003a80 <_printf_i+0x248>)
 80039e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039e4:	e7e3      	b.n	80039ae <_printf_i+0x176>
 80039e6:	0659      	lsls	r1, r3, #25
 80039e8:	bf48      	it	mi
 80039ea:	b2b6      	uxthmi	r6, r6
 80039ec:	e7e6      	b.n	80039bc <_printf_i+0x184>
 80039ee:	4615      	mov	r5, r2
 80039f0:	e7bb      	b.n	800396a <_printf_i+0x132>
 80039f2:	682b      	ldr	r3, [r5, #0]
 80039f4:	6826      	ldr	r6, [r4, #0]
 80039f6:	1d18      	adds	r0, r3, #4
 80039f8:	6961      	ldr	r1, [r4, #20]
 80039fa:	6028      	str	r0, [r5, #0]
 80039fc:	0635      	lsls	r5, r6, #24
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	d501      	bpl.n	8003a06 <_printf_i+0x1ce>
 8003a02:	6019      	str	r1, [r3, #0]
 8003a04:	e002      	b.n	8003a0c <_printf_i+0x1d4>
 8003a06:	0670      	lsls	r0, r6, #25
 8003a08:	d5fb      	bpl.n	8003a02 <_printf_i+0x1ca>
 8003a0a:	8019      	strh	r1, [r3, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4615      	mov	r5, r2
 8003a10:	6123      	str	r3, [r4, #16]
 8003a12:	e7ba      	b.n	800398a <_printf_i+0x152>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	2100      	movs	r1, #0
 8003a18:	1d1a      	adds	r2, r3, #4
 8003a1a:	602a      	str	r2, [r5, #0]
 8003a1c:	681d      	ldr	r5, [r3, #0]
 8003a1e:	6862      	ldr	r2, [r4, #4]
 8003a20:	4628      	mov	r0, r5
 8003a22:	f000 f82f 	bl	8003a84 <memchr>
 8003a26:	b108      	cbz	r0, 8003a2c <_printf_i+0x1f4>
 8003a28:	1b40      	subs	r0, r0, r5
 8003a2a:	6060      	str	r0, [r4, #4]
 8003a2c:	6863      	ldr	r3, [r4, #4]
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	2300      	movs	r3, #0
 8003a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a36:	e7a8      	b.n	800398a <_printf_i+0x152>
 8003a38:	462a      	mov	r2, r5
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	47d0      	blx	sl
 8003a42:	3001      	adds	r0, #1
 8003a44:	d0ab      	beq.n	800399e <_printf_i+0x166>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	079b      	lsls	r3, r3, #30
 8003a4a:	d413      	bmi.n	8003a74 <_printf_i+0x23c>
 8003a4c:	68e0      	ldr	r0, [r4, #12]
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	4298      	cmp	r0, r3
 8003a52:	bfb8      	it	lt
 8003a54:	4618      	movlt	r0, r3
 8003a56:	e7a4      	b.n	80039a2 <_printf_i+0x16a>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	4640      	mov	r0, r8
 8003a60:	47d0      	blx	sl
 8003a62:	3001      	adds	r0, #1
 8003a64:	d09b      	beq.n	800399e <_printf_i+0x166>
 8003a66:	3501      	adds	r5, #1
 8003a68:	68e3      	ldr	r3, [r4, #12]
 8003a6a:	9903      	ldr	r1, [sp, #12]
 8003a6c:	1a5b      	subs	r3, r3, r1
 8003a6e:	42ab      	cmp	r3, r5
 8003a70:	dcf2      	bgt.n	8003a58 <_printf_i+0x220>
 8003a72:	e7eb      	b.n	8003a4c <_printf_i+0x214>
 8003a74:	2500      	movs	r5, #0
 8003a76:	f104 0619 	add.w	r6, r4, #25
 8003a7a:	e7f5      	b.n	8003a68 <_printf_i+0x230>
 8003a7c:	08004b3b 	.word	0x08004b3b
 8003a80:	08004b4c 	.word	0x08004b4c

08003a84 <memchr>:
 8003a84:	4603      	mov	r3, r0
 8003a86:	b510      	push	{r4, lr}
 8003a88:	b2c9      	uxtb	r1, r1
 8003a8a:	4402      	add	r2, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	d101      	bne.n	8003a96 <memchr+0x12>
 8003a92:	2000      	movs	r0, #0
 8003a94:	e003      	b.n	8003a9e <memchr+0x1a>
 8003a96:	7804      	ldrb	r4, [r0, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	428c      	cmp	r4, r1
 8003a9c:	d1f6      	bne.n	8003a8c <memchr+0x8>
 8003a9e:	bd10      	pop	{r4, pc}

08003aa0 <memcpy>:
 8003aa0:	440a      	add	r2, r1
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003aa8:	d100      	bne.n	8003aac <memcpy+0xc>
 8003aaa:	4770      	bx	lr
 8003aac:	b510      	push	{r4, lr}
 8003aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab2:	4291      	cmp	r1, r2
 8003ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ab8:	d1f9      	bne.n	8003aae <memcpy+0xe>
 8003aba:	bd10      	pop	{r4, pc}

08003abc <memmove>:
 8003abc:	4288      	cmp	r0, r1
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	eb01 0402 	add.w	r4, r1, r2
 8003ac4:	d902      	bls.n	8003acc <memmove+0x10>
 8003ac6:	4284      	cmp	r4, r0
 8003ac8:	4623      	mov	r3, r4
 8003aca:	d807      	bhi.n	8003adc <memmove+0x20>
 8003acc:	1e43      	subs	r3, r0, #1
 8003ace:	42a1      	cmp	r1, r4
 8003ad0:	d008      	beq.n	8003ae4 <memmove+0x28>
 8003ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ada:	e7f8      	b.n	8003ace <memmove+0x12>
 8003adc:	4601      	mov	r1, r0
 8003ade:	4402      	add	r2, r0
 8003ae0:	428a      	cmp	r2, r1
 8003ae2:	d100      	bne.n	8003ae6 <memmove+0x2a>
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aee:	e7f7      	b.n	8003ae0 <memmove+0x24>

08003af0 <_free_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4605      	mov	r5, r0
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d040      	beq.n	8003b7a <_free_r+0x8a>
 8003af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afc:	1f0c      	subs	r4, r1, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfb8      	it	lt
 8003b02:	18e4      	addlt	r4, r4, r3
 8003b04:	f000 f910 	bl	8003d28 <__malloc_lock>
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <_free_r+0x8c>)
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	b933      	cbnz	r3, 8003b1c <_free_r+0x2c>
 8003b0e:	6063      	str	r3, [r4, #4]
 8003b10:	6014      	str	r4, [r2, #0]
 8003b12:	4628      	mov	r0, r5
 8003b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b18:	f000 b90c 	b.w	8003d34 <__malloc_unlock>
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d908      	bls.n	8003b32 <_free_r+0x42>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	1821      	adds	r1, r4, r0
 8003b24:	428b      	cmp	r3, r1
 8003b26:	bf01      	itttt	eq
 8003b28:	6819      	ldreq	r1, [r3, #0]
 8003b2a:	685b      	ldreq	r3, [r3, #4]
 8003b2c:	1809      	addeq	r1, r1, r0
 8003b2e:	6021      	streq	r1, [r4, #0]
 8003b30:	e7ed      	b.n	8003b0e <_free_r+0x1e>
 8003b32:	461a      	mov	r2, r3
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	b10b      	cbz	r3, 8003b3c <_free_r+0x4c>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d9fa      	bls.n	8003b32 <_free_r+0x42>
 8003b3c:	6811      	ldr	r1, [r2, #0]
 8003b3e:	1850      	adds	r0, r2, r1
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d10b      	bne.n	8003b5c <_free_r+0x6c>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	4401      	add	r1, r0
 8003b48:	1850      	adds	r0, r2, r1
 8003b4a:	4283      	cmp	r3, r0
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	d1e0      	bne.n	8003b12 <_free_r+0x22>
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4401      	add	r1, r0
 8003b56:	6011      	str	r1, [r2, #0]
 8003b58:	6053      	str	r3, [r2, #4]
 8003b5a:	e7da      	b.n	8003b12 <_free_r+0x22>
 8003b5c:	d902      	bls.n	8003b64 <_free_r+0x74>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	e7d6      	b.n	8003b12 <_free_r+0x22>
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	1821      	adds	r1, r4, r0
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	bf01      	itttt	eq
 8003b6c:	6819      	ldreq	r1, [r3, #0]
 8003b6e:	685b      	ldreq	r3, [r3, #4]
 8003b70:	1809      	addeq	r1, r1, r0
 8003b72:	6021      	streq	r1, [r4, #0]
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6054      	str	r4, [r2, #4]
 8003b78:	e7cb      	b.n	8003b12 <_free_r+0x22>
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	20000560 	.word	0x20000560

08003b80 <sbrk_aligned>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	4e0e      	ldr	r6, [pc, #56]	; (8003bbc <sbrk_aligned+0x3c>)
 8003b84:	460c      	mov	r4, r1
 8003b86:	6831      	ldr	r1, [r6, #0]
 8003b88:	4605      	mov	r5, r0
 8003b8a:	b911      	cbnz	r1, 8003b92 <sbrk_aligned+0x12>
 8003b8c:	f000 f8bc 	bl	8003d08 <_sbrk_r>
 8003b90:	6030      	str	r0, [r6, #0]
 8003b92:	4621      	mov	r1, r4
 8003b94:	4628      	mov	r0, r5
 8003b96:	f000 f8b7 	bl	8003d08 <_sbrk_r>
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	d00a      	beq.n	8003bb4 <sbrk_aligned+0x34>
 8003b9e:	1cc4      	adds	r4, r0, #3
 8003ba0:	f024 0403 	bic.w	r4, r4, #3
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d007      	beq.n	8003bb8 <sbrk_aligned+0x38>
 8003ba8:	1a21      	subs	r1, r4, r0
 8003baa:	4628      	mov	r0, r5
 8003bac:	f000 f8ac 	bl	8003d08 <_sbrk_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d101      	bne.n	8003bb8 <sbrk_aligned+0x38>
 8003bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8003bb8:	4620      	mov	r0, r4
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	20000564 	.word	0x20000564

08003bc0 <_malloc_r>:
 8003bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc4:	1ccd      	adds	r5, r1, #3
 8003bc6:	f025 0503 	bic.w	r5, r5, #3
 8003bca:	3508      	adds	r5, #8
 8003bcc:	2d0c      	cmp	r5, #12
 8003bce:	bf38      	it	cc
 8003bd0:	250c      	movcc	r5, #12
 8003bd2:	2d00      	cmp	r5, #0
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	db01      	blt.n	8003bdc <_malloc_r+0x1c>
 8003bd8:	42a9      	cmp	r1, r5
 8003bda:	d905      	bls.n	8003be8 <_malloc_r+0x28>
 8003bdc:	230c      	movs	r3, #12
 8003bde:	2600      	movs	r6, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4630      	mov	r0, r6
 8003be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be8:	4e2e      	ldr	r6, [pc, #184]	; (8003ca4 <_malloc_r+0xe4>)
 8003bea:	f000 f89d 	bl	8003d28 <__malloc_lock>
 8003bee:	6833      	ldr	r3, [r6, #0]
 8003bf0:	461c      	mov	r4, r3
 8003bf2:	bb34      	cbnz	r4, 8003c42 <_malloc_r+0x82>
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	f7ff ffc2 	bl	8003b80 <sbrk_aligned>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	4604      	mov	r4, r0
 8003c00:	d14d      	bne.n	8003c9e <_malloc_r+0xde>
 8003c02:	6834      	ldr	r4, [r6, #0]
 8003c04:	4626      	mov	r6, r4
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	d140      	bne.n	8003c8c <_malloc_r+0xcc>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	4638      	mov	r0, r7
 8003c10:	eb04 0803 	add.w	r8, r4, r3
 8003c14:	f000 f878 	bl	8003d08 <_sbrk_r>
 8003c18:	4580      	cmp	r8, r0
 8003c1a:	d13a      	bne.n	8003c92 <_malloc_r+0xd2>
 8003c1c:	6821      	ldr	r1, [r4, #0]
 8003c1e:	3503      	adds	r5, #3
 8003c20:	1a6d      	subs	r5, r5, r1
 8003c22:	f025 0503 	bic.w	r5, r5, #3
 8003c26:	3508      	adds	r5, #8
 8003c28:	2d0c      	cmp	r5, #12
 8003c2a:	bf38      	it	cc
 8003c2c:	250c      	movcc	r5, #12
 8003c2e:	4638      	mov	r0, r7
 8003c30:	4629      	mov	r1, r5
 8003c32:	f7ff ffa5 	bl	8003b80 <sbrk_aligned>
 8003c36:	3001      	adds	r0, #1
 8003c38:	d02b      	beq.n	8003c92 <_malloc_r+0xd2>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	442b      	add	r3, r5
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	e00e      	b.n	8003c60 <_malloc_r+0xa0>
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	1b52      	subs	r2, r2, r5
 8003c46:	d41e      	bmi.n	8003c86 <_malloc_r+0xc6>
 8003c48:	2a0b      	cmp	r2, #11
 8003c4a:	d916      	bls.n	8003c7a <_malloc_r+0xba>
 8003c4c:	1961      	adds	r1, r4, r5
 8003c4e:	42a3      	cmp	r3, r4
 8003c50:	6025      	str	r5, [r4, #0]
 8003c52:	bf18      	it	ne
 8003c54:	6059      	strne	r1, [r3, #4]
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	bf08      	it	eq
 8003c5a:	6031      	streq	r1, [r6, #0]
 8003c5c:	5162      	str	r2, [r4, r5]
 8003c5e:	604b      	str	r3, [r1, #4]
 8003c60:	4638      	mov	r0, r7
 8003c62:	f104 060b 	add.w	r6, r4, #11
 8003c66:	f000 f865 	bl	8003d34 <__malloc_unlock>
 8003c6a:	f026 0607 	bic.w	r6, r6, #7
 8003c6e:	1d23      	adds	r3, r4, #4
 8003c70:	1af2      	subs	r2, r6, r3
 8003c72:	d0b6      	beq.n	8003be2 <_malloc_r+0x22>
 8003c74:	1b9b      	subs	r3, r3, r6
 8003c76:	50a3      	str	r3, [r4, r2]
 8003c78:	e7b3      	b.n	8003be2 <_malloc_r+0x22>
 8003c7a:	6862      	ldr	r2, [r4, #4]
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	bf0c      	ite	eq
 8003c80:	6032      	streq	r2, [r6, #0]
 8003c82:	605a      	strne	r2, [r3, #4]
 8003c84:	e7ec      	b.n	8003c60 <_malloc_r+0xa0>
 8003c86:	4623      	mov	r3, r4
 8003c88:	6864      	ldr	r4, [r4, #4]
 8003c8a:	e7b2      	b.n	8003bf2 <_malloc_r+0x32>
 8003c8c:	4634      	mov	r4, r6
 8003c8e:	6876      	ldr	r6, [r6, #4]
 8003c90:	e7b9      	b.n	8003c06 <_malloc_r+0x46>
 8003c92:	230c      	movs	r3, #12
 8003c94:	4638      	mov	r0, r7
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	f000 f84c 	bl	8003d34 <__malloc_unlock>
 8003c9c:	e7a1      	b.n	8003be2 <_malloc_r+0x22>
 8003c9e:	6025      	str	r5, [r4, #0]
 8003ca0:	e7de      	b.n	8003c60 <_malloc_r+0xa0>
 8003ca2:	bf00      	nop
 8003ca4:	20000560 	.word	0x20000560

08003ca8 <_realloc_r>:
 8003ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cac:	4680      	mov	r8, r0
 8003cae:	4614      	mov	r4, r2
 8003cb0:	460e      	mov	r6, r1
 8003cb2:	b921      	cbnz	r1, 8003cbe <_realloc_r+0x16>
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cba:	f7ff bf81 	b.w	8003bc0 <_malloc_r>
 8003cbe:	b92a      	cbnz	r2, 8003ccc <_realloc_r+0x24>
 8003cc0:	f7ff ff16 	bl	8003af0 <_free_r>
 8003cc4:	4625      	mov	r5, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ccc:	f000 f838 	bl	8003d40 <_malloc_usable_size_r>
 8003cd0:	4284      	cmp	r4, r0
 8003cd2:	4607      	mov	r7, r0
 8003cd4:	d802      	bhi.n	8003cdc <_realloc_r+0x34>
 8003cd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cda:	d812      	bhi.n	8003d02 <_realloc_r+0x5a>
 8003cdc:	4621      	mov	r1, r4
 8003cde:	4640      	mov	r0, r8
 8003ce0:	f7ff ff6e 	bl	8003bc0 <_malloc_r>
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d0ed      	beq.n	8003cc6 <_realloc_r+0x1e>
 8003cea:	42bc      	cmp	r4, r7
 8003cec:	4622      	mov	r2, r4
 8003cee:	4631      	mov	r1, r6
 8003cf0:	bf28      	it	cs
 8003cf2:	463a      	movcs	r2, r7
 8003cf4:	f7ff fed4 	bl	8003aa0 <memcpy>
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f7ff fef8 	bl	8003af0 <_free_r>
 8003d00:	e7e1      	b.n	8003cc6 <_realloc_r+0x1e>
 8003d02:	4635      	mov	r5, r6
 8003d04:	e7df      	b.n	8003cc6 <_realloc_r+0x1e>
	...

08003d08 <_sbrk_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4d05      	ldr	r5, [pc, #20]	; (8003d24 <_sbrk_r+0x1c>)
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fd f884 	bl	8000e20 <_sbrk>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_sbrk_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_sbrk_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	20000568 	.word	0x20000568

08003d28 <__malloc_lock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_lock+0x8>)
 8003d2a:	f000 b811 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	2000056c 	.word	0x2000056c

08003d34 <__malloc_unlock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_unlock+0x8>)
 8003d36:	f000 b80c 	b.w	8003d52 <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	2000056c 	.word	0x2000056c

08003d40 <_malloc_usable_size_r>:
 8003d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d44:	1f18      	subs	r0, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfbc      	itt	lt
 8003d4a:	580b      	ldrlt	r3, [r1, r0]
 8003d4c:	18c0      	addlt	r0, r0, r3
 8003d4e:	4770      	bx	lr

08003d50 <__retarget_lock_acquire_recursive>:
 8003d50:	4770      	bx	lr

08003d52 <__retarget_lock_release_recursive>:
 8003d52:	4770      	bx	lr

08003d54 <_init>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr

08003d60 <_fini>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr
