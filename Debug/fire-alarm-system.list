
fire-alarm-system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000390c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080047f8  080047f8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f8  080047f8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000078  08004878  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08004878  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d00  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a65  00000000  00000000  00028da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017935  00000000  00000000  0002b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bac1  00000000  00000000  0004327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d6d  00000000  00000000  0004ed3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5aab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  000d5afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a00 	.word	0x08003a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003a00 	.word	0x08003a00

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000152:	f000 fec1 	bl	8000ed8 <HAL_Init>
  SystemClock_Config();
 8000156:	f000 f8c7 	bl	80002e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9bf 	bl	80004dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f913 	bl	8000388 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000162:	f000 f94f 	bl	8000404 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000166:	f000 f98b 	bl	8000480 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800016a:	f000 fa91 	bl	8000690 <SSD1306_Init>
  char str1[5], str2[5];

  SSD1306_GotoXY(0, 0);
 800016e:	2100      	movs	r1, #0
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fbf5 	bl	8000960 <SSD1306_GotoXY>
  SSD1306_Puts("WELCOME", &Font_11x18, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	494f      	ldr	r1, [pc, #316]	; (80002b8 <main+0x16c>)
 800017a:	4850      	ldr	r0, [pc, #320]	; (80002bc <main+0x170>)
 800017c:	f000 fc86 	bl	8000a8c <SSD1306_Puts>
  SSD1306_GotoXY(0, 30);
 8000180:	211e      	movs	r1, #30
 8000182:	2000      	movs	r0, #0
 8000184:	f000 fbec 	bl	8000960 <SSD1306_GotoXY>
  SSD1306_Puts(" PTIT ", &Font_11x18, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	494b      	ldr	r1, [pc, #300]	; (80002b8 <main+0x16c>)
 800018c:	484c      	ldr	r0, [pc, #304]	; (80002c0 <main+0x174>)
 800018e:	f000 fc7d 	bl	8000a8c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000192:	f000 fb41 	bl	8000818 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019a:	f000 feff 	bl	8000f9c <HAL_Delay>

  SSD1306_ScrollRight(0, 7);
 800019e:	2107      	movs	r1, #7
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 fa00 	bl	80005a6 <SSD1306_ScrollRight>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fef7 	bl	8000f9c <HAL_Delay>
  SSD1306_ScrollLeft(0, 7);
 80001ae:	2107      	movs	r1, #7
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 fa2e 	bl	8000612 <SSD1306_ScrollLeft>
  HAL_Delay(1000);
 80001b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ba:	f000 feef 	bl	8000f9c <HAL_Delay>
  SSD1306_Stopscroll();
 80001be:	f000 fa5e 	bl	800067e <SSD1306_Stopscroll>
  SSD1306_Clear();
 80001c2:	f000 fc88 	bl	8000ad6 <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 80001c6:	483f      	ldr	r0, [pc, #252]	; (80002c4 <main+0x178>)
 80001c8:	f000 ffe4 	bl	8001194 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 80001cc:	483e      	ldr	r0, [pc, #248]	; (80002c8 <main+0x17c>)
 80001ce:	f000 ffe1 	bl	8001194 <HAL_ADC_Start>
    HAL_Delay(20);
 80001d2:	2014      	movs	r0, #20
 80001d4:	f000 fee2 	bl	8000f9c <HAL_Delay>

    ADC_VAL_ALARM = HAL_ADC_GetValue(&hadc1);
 80001d8:	483a      	ldr	r0, [pc, #232]	; (80002c4 <main+0x178>)
 80001da:	f001 f8b5 	bl	8001348 <HAL_ADC_GetValue>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a3a      	ldr	r2, [pc, #232]	; (80002cc <main+0x180>)
 80001e2:	6013      	str	r3, [r2, #0]
    ADC_VAL_GAS = HAL_ADC_GetValue(&hadc2);
 80001e4:	4838      	ldr	r0, [pc, #224]	; (80002c8 <main+0x17c>)
 80001e6:	f001 f8af 	bl	8001348 <HAL_ADC_GetValue>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a38      	ldr	r2, [pc, #224]	; (80002d0 <main+0x184>)
 80001ee:	6013      	str	r3, [r2, #0]

    HAL_ADC_Stop(&hadc1);
 80001f0:	4834      	ldr	r0, [pc, #208]	; (80002c4 <main+0x178>)
 80001f2:	f001 f87d 	bl	80012f0 <HAL_ADC_Stop>
    HAL_ADC_Stop(&hadc2);
 80001f6:	4834      	ldr	r0, [pc, #208]	; (80002c8 <main+0x17c>)
 80001f8:	f001 f87a 	bl	80012f0 <HAL_ADC_Stop>

    if (ADC_VAL_ALARM > 3000 || ADC_VAL_GAS > 3000)
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <main+0x180>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000204:	4293      	cmp	r3, r2
 8000206:	d805      	bhi.n	8000214 <main+0xc8>
 8000208:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <main+0x184>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000210:	4293      	cmp	r3, r2
 8000212:	d910      	bls.n	8000236 <main+0xea>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	2120      	movs	r1, #32
 8000218:	482e      	ldr	r0, [pc, #184]	; (80002d4 <main+0x188>)
 800021a:	f001 fc9d 	bl	8001b58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	482c      	ldr	r0, [pc, #176]	; (80002d8 <main+0x18c>)
 8000226:	f001 fc97 	bl	8001b58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	4829      	ldr	r0, [pc, #164]	; (80002d4 <main+0x188>)
 8000230:	f001 fc92 	bl	8001b58 <HAL_GPIO_WritePin>
 8000234:	e00f      	b.n	8000256 <main+0x10a>
    } else {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2120      	movs	r1, #32
 800023a:	4826      	ldr	r0, [pc, #152]	; (80002d4 <main+0x188>)
 800023c:	f001 fc8c 	bl	8001b58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4824      	ldr	r0, [pc, #144]	; (80002d8 <main+0x18c>)
 8000248:	f001 fc86 	bl	8001b58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	4820      	ldr	r0, [pc, #128]	; (80002d4 <main+0x188>)
 8000252:	f001 fc81 	bl	8001b58 <HAL_GPIO_WritePin>
    }

    snprintf(str1, sizeof(str1), "%lu", ADC_VAL_ALARM);
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <main+0x180>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f107 0008 	add.w	r0, r7, #8
 800025e:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <main+0x190>)
 8000260:	2105      	movs	r1, #5
 8000262:	f002 ff3f 	bl	80030e4 <sniprintf>
    snprintf(str2, sizeof(str2), "%lu", ADC_VAL_GAS);
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <main+0x184>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4638      	mov	r0, r7
 800026c:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <main+0x190>)
 800026e:	2105      	movs	r1, #5
 8000270:	f002 ff38 	bl	80030e4 <sniprintf>

    SSD1306_GotoXY(0, 0);
 8000274:	2100      	movs	r1, #0
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fb72 	bl	8000960 <SSD1306_GotoXY>
    SSD1306_Puts("HY026: ", &Font_11x18, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	490e      	ldr	r1, [pc, #56]	; (80002b8 <main+0x16c>)
 8000280:	4817      	ldr	r0, [pc, #92]	; (80002e0 <main+0x194>)
 8000282:	f000 fc03 	bl	8000a8c <SSD1306_Puts>
    SSD1306_Puts(str1, &Font_11x18, 1);
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	2201      	movs	r2, #1
 800028c:	490a      	ldr	r1, [pc, #40]	; (80002b8 <main+0x16c>)
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fbfc 	bl	8000a8c <SSD1306_Puts>
    SSD1306_GotoXY(0, 30);
 8000294:	211e      	movs	r1, #30
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fb62 	bl	8000960 <SSD1306_GotoXY>
    SSD1306_Puts("GAS: ", &Font_11x18, 1);
 800029c:	2201      	movs	r2, #1
 800029e:	4906      	ldr	r1, [pc, #24]	; (80002b8 <main+0x16c>)
 80002a0:	4810      	ldr	r0, [pc, #64]	; (80002e4 <main+0x198>)
 80002a2:	f000 fbf3 	bl	8000a8c <SSD1306_Puts>
    SSD1306_Puts(str2, &Font_11x18, 1);
 80002a6:	463b      	mov	r3, r7
 80002a8:	2201      	movs	r2, #1
 80002aa:	4903      	ldr	r1, [pc, #12]	; (80002b8 <main+0x16c>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fbed 	bl	8000a8c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80002b2:	f000 fab1 	bl	8000818 <SSD1306_UpdateScreen>
  {
 80002b6:	e786      	b.n	80001c6 <main+0x7a>
 80002b8:	20000000 	.word	0x20000000
 80002bc:	08003a18 	.word	0x08003a18
 80002c0:	08003a20 	.word	0x08003a20
 80002c4:	20000094 	.word	0x20000094
 80002c8:	200000c4 	.word	0x200000c4
 80002cc:	20000148 	.word	0x20000148
 80002d0:	2000014c 	.word	0x2000014c
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40011000 	.word	0x40011000
 80002dc:	08003a28 	.word	0x08003a28
 80002e0:	08003a2c 	.word	0x08003a2c
 80002e4:	08003a34 	.word	0x08003a34

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b094      	sub	sp, #80	; 0x50
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 feec 	bl	80030d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	2302      	movs	r3, #2
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	2310      	movs	r3, #16
 8000322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000324:	2300      	movs	r3, #0
 8000326:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032c:	4618      	mov	r0, r3
 800032e:	f002 f9f5 	bl	800271c <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000338:	f000 f930 	bl	800059c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800033c:	230f      	movs	r3, #15
 800033e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fc62 	bl	8002c20 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000362:	f000 f91b 	bl	800059c <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000366:	2302      	movs	r3, #2
 8000368:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f002 fdcf 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800037c:	f000 f90e 	bl	800059c <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3750      	adds	r7, #80	; 0x50
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_ADC1_Init+0x74>)
 800039a:	4a19      	ldr	r2, [pc, #100]	; (8000400 <MX_ADC1_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_ADC1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_ADC1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_ADC1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_ADC1_Init+0x74>)
 80003b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_ADC1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_ADC1_Init+0x74>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_ADC1_Init+0x74>)
 80003c6:	f000 fe0d 	bl	8000fe4 <HAL_ADC_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003d0:	f000 f8e4 	bl	800059c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 80003d4:	2303      	movs	r3, #3
 80003d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d8:	2301      	movs	r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_ADC1_Init+0x74>)
 80003e6:	f000 ffbb 	bl	8001360 <HAL_ADC_ConfigChannel>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003f0:	f000 f8d4 	bl	800059c <Error_Handler>
  }
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000094 	.word	0x20000094
 8000400:	40012400 	.word	0x40012400

08000404 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]

  hadc2.Instance = ADC2;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_ADC2_Init+0x74>)
 8000416:	4a19      	ldr	r2, [pc, #100]	; (800047c <MX_ADC2_Init+0x78>)
 8000418:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_ADC2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_ADC2_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_ADC2_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_ADC2_Init+0x74>)
 800042e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000432:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <MX_ADC2_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_ADC2_Init+0x74>)
 800043c:	2201      	movs	r2, #1
 800043e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000440:	480d      	ldr	r0, [pc, #52]	; (8000478 <MX_ADC2_Init+0x74>)
 8000442:	f000 fdcf 	bl	8000fe4 <HAL_ADC_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800044c:	f000 f8a6 	bl	800059c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_4;
 8000450:	2304      	movs	r3, #4
 8000452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4619      	mov	r1, r3
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_ADC2_Init+0x74>)
 8000462:	f000 ff7d 	bl	8001360 <HAL_ADC_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800046c:	f000 f896 	bl	800059c <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000c4 	.word	0x200000c4
 800047c:	40012800 	.word	0x40012800

08000480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_I2C1_Init+0x50>)
 8000486:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <MX_I2C1_Init+0x54>)
 8000488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_I2C1_Init+0x50>)
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <MX_I2C1_Init+0x58>)
 800048e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_I2C1_Init+0x50>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_I2C1_Init+0x50>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_I2C1_Init+0x50>)
 800049e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_I2C1_Init+0x50>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_I2C1_Init+0x50>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_I2C1_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_I2C1_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_I2C1_Init+0x50>)
 80004be:	f001 fb63 	bl	8001b88 <HAL_I2C_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004c8:	f000 f868 	bl	800059c <Error_Handler>
  }
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000f4 	.word	0x200000f4
 80004d4:	40005400 	.word	0x40005400
 80004d8:	00061a80 	.word	0x00061a80

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_GPIO_Init+0xb4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a26      	ldr	r2, [pc, #152]	; (8000590 <MX_GPIO_Init+0xb4>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_GPIO_Init+0xb4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0310 	and.w	r3, r3, #16
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MX_GPIO_Init+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a20      	ldr	r2, [pc, #128]	; (8000590 <MX_GPIO_Init+0xb4>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_GPIO_Init+0xb4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_GPIO_Init+0xb4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <MX_GPIO_Init+0xb4>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_GPIO_Init+0xb4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4815      	ldr	r0, [pc, #84]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000540:	f001 fb0a 	bl	8001b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	21a0      	movs	r1, #160	; 0xa0
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <MX_GPIO_Init+0xbc>)
 800054a:	f001 fb05 	bl	8001b58 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000568:	f001 f972 	bl	8001850 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2302      	movs	r3, #2
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_GPIO_Init+0xbc>)
 8000584:	f001 f964 	bl	8001850 <HAL_GPIO_Init>
}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	40011000 	.word	0x40011000
 8000598:	40010800 	.word	0x40010800

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>

080005a6 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4603      	mov	r3, r0
 80005ae:	460a      	mov	r2, r1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	4613      	mov	r3, r2
 80005b4:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80005b6:	2226      	movs	r2, #38	; 0x26
 80005b8:	2100      	movs	r1, #0
 80005ba:	2078      	movs	r0, #120	; 0x78
 80005bc:	f000 fb0e 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2078      	movs	r0, #120	; 0x78
 80005c6:	f000 fb09 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	461a      	mov	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	2078      	movs	r0, #120	; 0x78
 80005d2:	f000 fb03 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2078      	movs	r0, #120	; 0x78
 80005dc:	f000 fafe 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	2078      	movs	r0, #120	; 0x78
 80005e8:	f000 faf8 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2078      	movs	r0, #120	; 0x78
 80005f2:	f000 faf3 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	2100      	movs	r1, #0
 80005fa:	2078      	movs	r0, #120	; 0x78
 80005fc:	f000 faee 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000600:	222f      	movs	r2, #47	; 0x2f
 8000602:	2100      	movs	r1, #0
 8000604:	2078      	movs	r0, #120	; 0x78
 8000606:	f000 fae9 	bl	8000bdc <ssd1306_I2C_Write>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	460a      	mov	r2, r1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	4613      	mov	r3, r2
 8000620:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000622:	2227      	movs	r2, #39	; 0x27
 8000624:	2100      	movs	r1, #0
 8000626:	2078      	movs	r0, #120	; 0x78
 8000628:	f000 fad8 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2078      	movs	r0, #120	; 0x78
 8000632:	f000 fad3 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	461a      	mov	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	2078      	movs	r0, #120	; 0x78
 800063e:	f000 facd 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2078      	movs	r0, #120	; 0x78
 8000648:	f000 fac8 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	461a      	mov	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 fac2 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	; 0x78
 800065e:	f000 fabd 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000662:	22ff      	movs	r2, #255	; 0xff
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	; 0x78
 8000668:	f000 fab8 	bl	8000bdc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800066c:	222f      	movs	r2, #47	; 0x2f
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	; 0x78
 8000672:	f000 fab3 	bl	8000bdc <ssd1306_I2C_Write>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000682:	222e      	movs	r2, #46	; 0x2e
 8000684:	2100      	movs	r1, #0
 8000686:	2078      	movs	r0, #120	; 0x78
 8000688:	f000 faa8 	bl	8000bdc <ssd1306_I2C_Write>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000696:	f000 fa27 	bl	8000ae8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800069a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800069e:	2201      	movs	r2, #1
 80006a0:	2178      	movs	r1, #120	; 0x78
 80006a2:	485b      	ldr	r0, [pc, #364]	; (8000810 <SSD1306_Init+0x180>)
 80006a4:	f001 fcb2 	bl	800200c <HAL_I2C_IsDeviceReady>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e0a9      	b.n	8000806 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80006b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006b8:	e002      	b.n	80006c0 <SSD1306_Init+0x30>
		p--;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3b01      	subs	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f9      	bne.n	80006ba <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80006c6:	22ae      	movs	r2, #174	; 0xae
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	; 0x78
 80006cc:	f000 fa86 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 fa81 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006da:	2210      	movs	r2, #16
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	; 0x78
 80006e0:	f000 fa7c 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006e4:	22b0      	movs	r2, #176	; 0xb0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fa77 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80006ee:	22c8      	movs	r2, #200	; 0xc8
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fa72 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 fa6d 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000702:	2210      	movs	r2, #16
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 fa68 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800070c:	2240      	movs	r2, #64	; 0x40
 800070e:	2100      	movs	r1, #0
 8000710:	2078      	movs	r0, #120	; 0x78
 8000712:	f000 fa63 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000716:	2281      	movs	r2, #129	; 0x81
 8000718:	2100      	movs	r1, #0
 800071a:	2078      	movs	r0, #120	; 0x78
 800071c:	f000 fa5e 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	2100      	movs	r1, #0
 8000724:	2078      	movs	r0, #120	; 0x78
 8000726:	f000 fa59 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800072a:	22a1      	movs	r2, #161	; 0xa1
 800072c:	2100      	movs	r1, #0
 800072e:	2078      	movs	r0, #120	; 0x78
 8000730:	f000 fa54 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000734:	22a6      	movs	r2, #166	; 0xa6
 8000736:	2100      	movs	r1, #0
 8000738:	2078      	movs	r0, #120	; 0x78
 800073a:	f000 fa4f 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800073e:	22a8      	movs	r2, #168	; 0xa8
 8000740:	2100      	movs	r1, #0
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f000 fa4a 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000748:	223f      	movs	r2, #63	; 0x3f
 800074a:	2100      	movs	r1, #0
 800074c:	2078      	movs	r0, #120	; 0x78
 800074e:	f000 fa45 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000752:	22a4      	movs	r2, #164	; 0xa4
 8000754:	2100      	movs	r1, #0
 8000756:	2078      	movs	r0, #120	; 0x78
 8000758:	f000 fa40 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800075c:	22d3      	movs	r2, #211	; 0xd3
 800075e:	2100      	movs	r1, #0
 8000760:	2078      	movs	r0, #120	; 0x78
 8000762:	f000 fa3b 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2078      	movs	r0, #120	; 0x78
 800076c:	f000 fa36 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000770:	22d5      	movs	r2, #213	; 0xd5
 8000772:	2100      	movs	r1, #0
 8000774:	2078      	movs	r0, #120	; 0x78
 8000776:	f000 fa31 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800077a:	22f0      	movs	r2, #240	; 0xf0
 800077c:	2100      	movs	r1, #0
 800077e:	2078      	movs	r0, #120	; 0x78
 8000780:	f000 fa2c 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000784:	22d9      	movs	r2, #217	; 0xd9
 8000786:	2100      	movs	r1, #0
 8000788:	2078      	movs	r0, #120	; 0x78
 800078a:	f000 fa27 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800078e:	2222      	movs	r2, #34	; 0x22
 8000790:	2100      	movs	r1, #0
 8000792:	2078      	movs	r0, #120	; 0x78
 8000794:	f000 fa22 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000798:	22da      	movs	r2, #218	; 0xda
 800079a:	2100      	movs	r1, #0
 800079c:	2078      	movs	r0, #120	; 0x78
 800079e:	f000 fa1d 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007a2:	2212      	movs	r2, #18
 80007a4:	2100      	movs	r1, #0
 80007a6:	2078      	movs	r0, #120	; 0x78
 80007a8:	f000 fa18 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007ac:	22db      	movs	r2, #219	; 0xdb
 80007ae:	2100      	movs	r1, #0
 80007b0:	2078      	movs	r0, #120	; 0x78
 80007b2:	f000 fa13 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	2078      	movs	r0, #120	; 0x78
 80007bc:	f000 fa0e 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007c0:	228d      	movs	r2, #141	; 0x8d
 80007c2:	2100      	movs	r1, #0
 80007c4:	2078      	movs	r0, #120	; 0x78
 80007c6:	f000 fa09 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80007ca:	2214      	movs	r2, #20
 80007cc:	2100      	movs	r1, #0
 80007ce:	2078      	movs	r0, #120	; 0x78
 80007d0:	f000 fa04 	bl	8000bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80007d4:	22af      	movs	r2, #175	; 0xaf
 80007d6:	2100      	movs	r1, #0
 80007d8:	2078      	movs	r0, #120	; 0x78
 80007da:	f000 f9ff 	bl	8000bdc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80007de:	222e      	movs	r2, #46	; 0x2e
 80007e0:	2100      	movs	r1, #0
 80007e2:	2078      	movs	r0, #120	; 0x78
 80007e4:	f000 f9fa 	bl	8000bdc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f843 	bl	8000874 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80007ee:	f000 f813 	bl	8000818 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <SSD1306_Init+0x184>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SSD1306_Init+0x184>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SSD1306_Init+0x184>)
 8000800:	2201      	movs	r2, #1
 8000802:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000804:	2301      	movs	r3, #1
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000f4 	.word	0x200000f4
 8000814:	20000550 	.word	0x20000550

08000818 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800081e:	2300      	movs	r3, #0
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	e01d      	b.n	8000860 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3b50      	subs	r3, #80	; 0x50
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	2078      	movs	r0, #120	; 0x78
 8000830:	f000 f9d4 	bl	8000bdc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2078      	movs	r0, #120	; 0x78
 800083a:	f000 f9cf 	bl	8000bdc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800083e:	2210      	movs	r2, #16
 8000840:	2100      	movs	r1, #0
 8000842:	2078      	movs	r0, #120	; 0x78
 8000844:	f000 f9ca 	bl	8000bdc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	01db      	lsls	r3, r3, #7
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <SSD1306_UpdateScreen+0x58>)
 800084e:	441a      	add	r2, r3
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f000 f95b 	bl	8000b10 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b07      	cmp	r3, #7
 8000864:	d9de      	bls.n	8000824 <SSD1306_UpdateScreen+0xc>
	}
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000150 	.word	0x20000150

08000874 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <SSD1306_Fill+0x14>
 8000884:	2300      	movs	r3, #0
 8000886:	e000      	b.n	800088a <SSD1306_Fill+0x16>
 8000888:	23ff      	movs	r3, #255	; 0xff
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088e:	4619      	mov	r1, r3
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <SSD1306_Fill+0x2c>)
 8000892:	f002 fc1f 	bl	80030d4 <memset>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000150 	.word	0x20000150

080008a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	460b      	mov	r3, r1
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	70fb      	strb	r3, [r7, #3]
	if (
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ba:	d848      	bhi.n	800094e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80008bc:	88bb      	ldrh	r3, [r7, #4]
 80008be:	2b3f      	cmp	r3, #63	; 0x3f
 80008c0:	d845      	bhi.n	800094e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <SSD1306_DrawPixel+0xb4>)
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d11a      	bne.n	8000914 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	88bb      	ldrh	r3, [r7, #4]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	b298      	uxth	r0, r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	01db      	lsls	r3, r3, #7
 80008ea:	4413      	add	r3, r2
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <SSD1306_DrawPixel+0xb8>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	b25a      	sxtb	r2, r3
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b259      	sxtb	r1, r3
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	4603      	mov	r3, r0
 8000908:	01db      	lsls	r3, r3, #7
 800090a:	4413      	add	r3, r2
 800090c:	b2c9      	uxtb	r1, r1
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <SSD1306_DrawPixel+0xb8>)
 8000910:	54d1      	strb	r1, [r2, r3]
 8000912:	e01d      	b.n	8000950 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b298      	uxth	r0, r3
 800091c:	4603      	mov	r3, r0
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	4413      	add	r3, r2
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SSD1306_DrawPixel+0xb8>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	b25a      	sxtb	r2, r3
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	b25b      	sxtb	r3, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4013      	ands	r3, r2
 800093c:	b259      	sxtb	r1, r3
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	4603      	mov	r3, r0
 8000942:	01db      	lsls	r3, r3, #7
 8000944:	4413      	add	r3, r2
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <SSD1306_DrawPixel+0xb8>)
 800094a:	54d1      	strb	r1, [r2, r3]
 800094c:	e000      	b.n	8000950 <SSD1306_DrawPixel+0xac>
		return;
 800094e:	bf00      	nop
	}
}
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000550 	.word	0x20000550
 800095c:	20000150 	.word	0x20000150

08000960 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	4613      	mov	r3, r2
 800096e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000970:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SSD1306_GotoXY+0x28>)
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <SSD1306_GotoXY+0x28>)
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	8053      	strh	r3, [r2, #2]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000550 	.word	0x20000550

0800098c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <SSD1306_Putc+0xfc>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
	if (
 80009a8:	2b7f      	cmp	r3, #127	; 0x7f
 80009aa:	dc07      	bgt.n	80009bc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <SSD1306_Putc+0xfc>)
 80009ae:	885b      	ldrh	r3, [r3, #2]
 80009b0:	461a      	mov	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	785b      	ldrb	r3, [r3, #1]
 80009b6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009b8:	2b3f      	cmp	r3, #63	; 0x3f
 80009ba:	dd01      	ble.n	80009c0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	e05e      	b.n	8000a7e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e04b      	b.n	8000a5e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3b20      	subs	r3, #32
 80009ce:	6839      	ldr	r1, [r7, #0]
 80009d0:	7849      	ldrb	r1, [r1, #1]
 80009d2:	fb01 f303 	mul.w	r3, r1, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	440b      	add	r3, r1
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	e030      	b.n	8000a4c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d010      	beq.n	8000a1c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <SSD1306_Putc+0xfc>)
 80009fc:	881a      	ldrh	r2, [r3, #0]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4413      	add	r3, r2
 8000a04:	b298      	uxth	r0, r3
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a08:	885a      	ldrh	r2, [r3, #2]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff ff45 	bl	80008a4 <SSD1306_DrawPixel>
 8000a1a:	e014      	b.n	8000a46 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a1e:	881a      	ldrh	r2, [r3, #0]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b298      	uxth	r0, r3
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a2a:	885a      	ldrh	r2, [r3, #2]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b299      	uxth	r1, r3
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf0c      	ite	eq
 8000a3a:	2301      	moveq	r3, #1
 8000a3c:	2300      	movne	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	f7ff ff2f 	bl	80008a4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d3c8      	bcc.n	80009ea <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	461a      	mov	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d3ad      	bcc.n	80009c6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a7a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000550 	.word	0x20000550

08000a8c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a9a:	e012      	b.n	8000ac2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff71 	bl	800098c <SSD1306_Putc>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d002      	beq.n	8000abc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	e008      	b.n	8000ace <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1e8      	bne.n	8000a9c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	781b      	ldrb	r3, [r3, #0]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff feca 	bl	8000874 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ae0:	f7ff fe9a 	bl	8000818 <SSD1306_UpdateScreen>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <ssd1306_I2C_Init+0x24>)
 8000af0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000af2:	e002      	b.n	8000afa <ssd1306_I2C_Init+0x12>
		p--;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f9      	bne.n	8000af4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	0003d090 	.word	0x0003d090

08000b10 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b0c7      	sub	sp, #284	; 0x11c
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	4604      	mov	r4, r0
 8000b18:	4608      	mov	r0, r1
 8000b1a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b1e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b22:	600a      	str	r2, [r1, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b2a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b2e:	4622      	mov	r2, r4
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b36:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b46:	460a      	mov	r2, r1
 8000b48:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b52:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b56:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000b5a:	7812      	ldrb	r2, [r2, #0]
 8000b5c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b64:	e015      	b.n	8000b92 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000b66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b6e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	441a      	add	r2, r3
 8000b76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	7811      	ldrb	r1, [r2, #0]
 8000b7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b82:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000b86:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b9c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ba0:	8812      	ldrh	r2, [r2, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d8df      	bhi.n	8000b66 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000baa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b299      	uxth	r1, r3
 8000bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	9000      	str	r0, [sp, #0]
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000bca:	f001 f921 	bl	8001e10 <HAL_I2C_Master_Transmit>
}
 8000bce:	bf00      	nop
 8000bd0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	200000f4 	.word	0x200000f4

08000bdc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	460b      	mov	r3, r1
 8000be8:	71bb      	strb	r3, [r7, #6]
 8000bea:	4613      	mov	r3, r2
 8000bec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	f107 020c 	add.w	r2, r7, #12
 8000bfe:	230a      	movs	r3, #10
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2302      	movs	r3, #2
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <ssd1306_I2C_Write+0x38>)
 8000c06:	f001 f903 	bl	8001e10 <HAL_I2C_Master_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000f4 	.word	0x200000f4

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x60>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_MspInit+0x60>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <HAL_ADC_MspInit+0xbc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d122      	bne.n	8000ce2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a20      	ldr	r2, [pc, #128]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <HAL_ADC_MspInit+0xc4>)
 8000cdc:	f000 fdb8 	bl	8001850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ce0:	e026      	b.n	8000d30 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d121      	bne.n	8000d30 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_ADC_MspInit+0xc0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_ADC_MspInit+0xc4>)
 8000d2c:	f000 fd90 	bl	8001850 <HAL_GPIO_Init>
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40012400 	.word	0x40012400
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40012800 	.word	0x40012800

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_I2C_MspInit+0x70>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d123      	bne.n	8000db0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_I2C_MspInit+0x78>)
 8000d94:	f000 fd5c 	bl	8001850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f8ab 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f002 f91c 	bl	8003080 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20005000 	.word	0x20005000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000558 	.word	0x20000558
 8000e7c:	20000570 	.word	0x20000570

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff fff8 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e92:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea8:	4c09      	ldr	r4, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 f8e9 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff f947 	bl	800014c <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ec8:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 8000ecc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ed0:	20000570 	.word	0x20000570

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 fc7d 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fe90 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fc87 	bl	8001836 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 fc5d 	bl	80017fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000010 	.word	0x20000010
 8000f60:	2000000c 	.word	0x2000000c

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_IncTick+0x20>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000010 	.word	0x20000010
 8000f84:	2000055c 	.word	0x2000055c

08000f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	2000055c 	.word	0x2000055c

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff fff0 	bl	8000f88 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffe0 	bl	8000f88 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000010 	.word	0x20000010

08000fe4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0be      	b.n	8001184 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	2b00      	cmp	r3, #0
 8001012:	d109      	bne.n	8001028 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fe2a 	bl	8000c7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 faeb 	bl	8001604 <ADC_ConversionStop_Disable>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 8099 	bne.w	8001172 <HAL_ADC_Init+0x18e>
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 8095 	bne.w	8001172 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001050:	f023 0302 	bic.w	r3, r3, #2
 8001054:	f043 0202 	orr.w	r2, r3, #2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001064:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800106c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4313      	orrs	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107c:	d003      	beq.n	8001086 <HAL_ADC_Init+0xa2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_ADC_Init+0xa8>
 8001086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108a:	e000      	b.n	800108e <HAL_ADC_Init+0xaa>
 800108c:	2300      	movs	r3, #0
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7d1b      	ldrb	r3, [r3, #20]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d119      	bne.n	80010d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7b1b      	ldrb	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	035a      	lsls	r2, r3, #13
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	e00b      	b.n	80010d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f043 0220 	orr.w	r2, r3, #32
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_ADC_Init+0x1a8>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001100:	d003      	beq.n	800110a <HAL_ADC_Init+0x126>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d104      	bne.n	8001114 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	3b01      	subs	r3, #1
 8001110:	051b      	lsls	r3, r3, #20
 8001112:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	430a      	orrs	r2, r1
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_ADC_Init+0x1ac>)
 8001130:	4013      	ands	r3, r2
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	429a      	cmp	r2, r3
 8001136:	d10b      	bne.n	8001150 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	f023 0303 	bic.w	r3, r3, #3
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800114e:	e018      	b.n	8001182 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f023 0312 	bic.w	r3, r3, #18
 8001158:	f043 0210 	orr.w	r2, r3, #16
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001170:	e007      	b.n	8001182 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	ffe1f7fd 	.word	0xffe1f7fd
 8001190:	ff1f0efe 	.word	0xff1f0efe

08001194 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Start+0x1a>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e098      	b.n	80012e0 <HAL_ADC_Start+0x14c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f9ca 	bl	8001550 <ADC_Enable>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 8087 	bne.w	80012d6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a41      	ldr	r2, [pc, #260]	; (80012e8 <HAL_ADC_Start+0x154>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d105      	bne.n	80011f2 <HAL_ADC_Start+0x5e>
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <HAL_ADC_Start+0x158>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d115      	bne.n	800121e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d026      	beq.n	800125a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001214:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800121c:	e01d      	b.n	800125a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <HAL_ADC_Start+0x158>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d004      	beq.n	800123e <HAL_ADC_Start+0xaa>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a2b      	ldr	r2, [pc, #172]	; (80012e8 <HAL_ADC_Start+0x154>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10d      	bne.n	800125a <HAL_ADC_Start+0xc6>
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_ADC_Start+0x158>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001252:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f023 0206 	bic.w	r2, r3, #6
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
 8001272:	e002      	b.n	800127a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f06f 0202 	mvn.w	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001296:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800129a:	d113      	bne.n	80012c4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_ADC_Start+0x154>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_ADC_Start+0x158>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d108      	bne.n	80012c4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	e00c      	b.n	80012de <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e003      	b.n	80012de <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40012800 	.word	0x40012800
 80012ec:	40012400 	.word	0x40012400

080012f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Stop+0x1a>
 8001306:	2302      	movs	r3, #2
 8001308:	e01a      	b.n	8001340 <HAL_ADC_Stop+0x50>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f976 	bl	8001604 <ADC_ConversionStop_Disable>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x20>
 800137c:	2302      	movs	r3, #2
 800137e:	e0dc      	b.n	800153a <HAL_ADC_ConfigChannel+0x1da>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b06      	cmp	r3, #6
 800138e:	d81c      	bhi.n	80013ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	3b05      	subs	r3, #5
 80013a2:	221f      	movs	r2, #31
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4019      	ands	r1, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b05      	subs	r3, #5
 80013bc:	fa00 f203 	lsl.w	r2, r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
 80013c8:	e03c      	b.n	8001444 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d81c      	bhi.n	800140c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b23      	subs	r3, #35	; 0x23
 80013e4:	221f      	movs	r2, #31
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	4019      	ands	r1, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3b23      	subs	r3, #35	; 0x23
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
 800140a:	e01b      	b.n	8001444 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b41      	subs	r3, #65	; 0x41
 800141e:	221f      	movs	r2, #31
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	4019      	ands	r1, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	3b41      	subs	r3, #65	; 0x41
 8001438:	fa00 f203 	lsl.w	r2, r0, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d91c      	bls.n	8001486 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68d9      	ldr	r1, [r3, #12]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3b1e      	subs	r3, #30
 800145e:	2207      	movs	r2, #7
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	4019      	ands	r1, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6898      	ldr	r0, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	3b1e      	subs	r3, #30
 8001478:	fa00 f203 	lsl.w	r2, r0, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	e019      	b.n	80014ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6919      	ldr	r1, [r3, #16]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	2207      	movs	r2, #7
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	4019      	ands	r1, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6898      	ldr	r0, [r3, #8]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	fa00 f203 	lsl.w	r2, r0, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014c6:	2b11      	cmp	r3, #17
 80014c8:	d132      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_ADC_ConfigChannel+0x1e4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d125      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d126      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d11a      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_ADC_ConfigChannel+0x1e8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <HAL_ADC_ConfigChannel+0x1ec>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	0c9a      	lsrs	r2, r3, #18
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001510:	e002      	b.n	8001518 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3b01      	subs	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x1b2>
 800151e:	e007      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	f043 0220 	orr.w	r2, r3, #32
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40012400 	.word	0x40012400
 8001548:	20000008 	.word	0x20000008
 800154c:	431bde83 	.word	0x431bde83

08001550 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d040      	beq.n	80015f0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <ADC_Enable+0xac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <ADC_Enable+0xb0>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800158c:	e002      	b.n	8001594 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3b01      	subs	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800159a:	f7ff fcf5 	bl	8000f88 <HAL_GetTick>
 800159e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015a0:	e01f      	b.n	80015e2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015a2:	f7ff fcf1 	bl	8000f88 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d918      	bls.n	80015e2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d011      	beq.n	80015e2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f043 0210 	orr.w	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e007      	b.n	80015f2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d1d8      	bne.n	80015a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	431bde83 	.word	0x431bde83

08001604 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d12e      	bne.n	800167c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800162e:	f7ff fcab 	bl	8000f88 <HAL_GetTick>
 8001632:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001634:	e01b      	b.n	800166e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001636:	f7ff fca7 	bl	8000f88 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d914      	bls.n	800166e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10d      	bne.n	800166e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f043 0210 	orr.w	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e007      	b.n	800167e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b01      	cmp	r3, #1
 800167a:	d0dc      	beq.n	8001636 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b4:	d301      	bcc.n	80017ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00f      	b.n	80017da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <SysTick_Config+0x40>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c2:	210f      	movs	r1, #15
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f7ff ff90 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SysTick_Config+0x40>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <SysTick_Config+0x40>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff49 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001810:	f7ff ff5e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff ff90 	bl	8001740 <NVIC_EncodePriority>
 8001820:	4602      	mov	r2, r0
 8001822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff5f 	bl	80016ec <__NVIC_SetPriority>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffb0 	bl	80017a4 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b08b      	sub	sp, #44	; 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	e169      	b.n	8001b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001864:	2201      	movs	r2, #1
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8158 	bne.w	8001b32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4a9a      	ldr	r2, [pc, #616]	; (8001af0 <HAL_GPIO_Init+0x2a0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d05e      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 800188c:	4a98      	ldr	r2, [pc, #608]	; (8001af0 <HAL_GPIO_Init+0x2a0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d875      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 8001892:	4a98      	ldr	r2, [pc, #608]	; (8001af4 <HAL_GPIO_Init+0x2a4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d058      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 8001898:	4a96      	ldr	r2, [pc, #600]	; (8001af4 <HAL_GPIO_Init+0x2a4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d86f      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 800189e:	4a96      	ldr	r2, [pc, #600]	; (8001af8 <HAL_GPIO_Init+0x2a8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d052      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 80018a4:	4a94      	ldr	r2, [pc, #592]	; (8001af8 <HAL_GPIO_Init+0x2a8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d869      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018aa:	4a94      	ldr	r2, [pc, #592]	; (8001afc <HAL_GPIO_Init+0x2ac>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04c      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 80018b0:	4a92      	ldr	r2, [pc, #584]	; (8001afc <HAL_GPIO_Init+0x2ac>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d863      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018b6:	4a92      	ldr	r2, [pc, #584]	; (8001b00 <HAL_GPIO_Init+0x2b0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d046      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 80018bc:	4a90      	ldr	r2, [pc, #576]	; (8001b00 <HAL_GPIO_Init+0x2b0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d85d      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d82a      	bhi.n	800191c <HAL_GPIO_Init+0xcc>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d859      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <HAL_GPIO_Init+0x80>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	0800194b 	.word	0x0800194b
 80018d4:	08001925 	.word	0x08001925
 80018d8:	08001937 	.word	0x08001937
 80018dc:	08001979 	.word	0x08001979
 80018e0:	0800197f 	.word	0x0800197f
 80018e4:	0800197f 	.word	0x0800197f
 80018e8:	0800197f 	.word	0x0800197f
 80018ec:	0800197f 	.word	0x0800197f
 80018f0:	0800197f 	.word	0x0800197f
 80018f4:	0800197f 	.word	0x0800197f
 80018f8:	0800197f 	.word	0x0800197f
 80018fc:	0800197f 	.word	0x0800197f
 8001900:	0800197f 	.word	0x0800197f
 8001904:	0800197f 	.word	0x0800197f
 8001908:	0800197f 	.word	0x0800197f
 800190c:	0800197f 	.word	0x0800197f
 8001910:	0800197f 	.word	0x0800197f
 8001914:	0800192d 	.word	0x0800192d
 8001918:	08001941 	.word	0x08001941
 800191c:	4a79      	ldr	r2, [pc, #484]	; (8001b04 <HAL_GPIO_Init+0x2b4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001922:	e02c      	b.n	800197e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e029      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	3304      	adds	r3, #4
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e024      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	3308      	adds	r3, #8
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e01f      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	330c      	adds	r3, #12
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e01a      	b.n	8001980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001952:	2304      	movs	r3, #4
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e013      	b.n	8001980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001960:	2308      	movs	r3, #8
 8001962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	611a      	str	r2, [r3, #16]
          break;
 800196a:	e009      	b.n	8001980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800196c:	2308      	movs	r3, #8
 800196e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	615a      	str	r2, [r3, #20]
          break;
 8001976:	e003      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x130>
          break;
 800197e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d801      	bhi.n	800198a <HAL_GPIO_Init+0x13a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	e001      	b.n	800198e <HAL_GPIO_Init+0x13e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3304      	adds	r3, #4
 800198e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d802      	bhi.n	800199c <HAL_GPIO_Init+0x14c>
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x152>
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3b08      	subs	r3, #8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	210f      	movs	r1, #15
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	401a      	ands	r2, r3
 80019b4:	6a39      	ldr	r1, [r7, #32]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	431a      	orrs	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80b1 	beq.w	8001b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d0:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <HAL_GPIO_Init+0x2b8>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x2b8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2b8>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e8:	4a48      	ldr	r2, [pc, #288]	; (8001b0c <HAL_GPIO_Init+0x2bc>)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a40      	ldr	r2, [pc, #256]	; (8001b10 <HAL_GPIO_Init+0x2c0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_GPIO_Init+0x1ec>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3f      	ldr	r2, [pc, #252]	; (8001b14 <HAL_GPIO_Init+0x2c4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1e8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a3e      	ldr	r2, [pc, #248]	; (8001b18 <HAL_GPIO_Init+0x2c8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1e4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a3d      	ldr	r2, [pc, #244]	; (8001b1c <HAL_GPIO_Init+0x2cc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1e0>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1ee>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4e:	492f      	ldr	r1, [pc, #188]	; (8001b0c <HAL_GPIO_Init+0x2bc>)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	492c      	ldr	r1, [pc, #176]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4928      	ldr	r1, [pc, #160]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4922      	ldr	r1, [pc, #136]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	491e      	ldr	r1, [pc, #120]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4918      	ldr	r1, [pc, #96]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4914      	ldr	r1, [pc, #80]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d021      	beq.n	8001b24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	490e      	ldr	r1, [pc, #56]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e021      	b.n	8001b32 <HAL_GPIO_Init+0x2e2>
 8001aee:	bf00      	nop
 8001af0:	10320000 	.word	0x10320000
 8001af4:	10310000 	.word	0x10310000
 8001af8:	10220000 	.word	0x10220000
 8001afc:	10210000 	.word	0x10210000
 8001b00:	10120000 	.word	0x10120000
 8001b04:	10110000 	.word	0x10110000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40010800 	.word	0x40010800
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	40011400 	.word	0x40011400
 8001b20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4909      	ldr	r1, [pc, #36]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f ae8e 	bne.w	8001864 <HAL_GPIO_Init+0x14>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	372c      	adds	r7, #44	; 0x2c
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b74:	e003      	b.n	8001b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e12b      	b.n	8001df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff f8ca 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2224      	movs	r2, #36	; 0x24
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bec:	f001 f960 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8001bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a81      	ldr	r2, [pc, #516]	; (8001dfc <HAL_I2C_Init+0x274>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d807      	bhi.n	8001c0c <HAL_I2C_Init+0x84>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a80      	ldr	r2, [pc, #512]	; (8001e00 <HAL_I2C_Init+0x278>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	bf94      	ite	ls
 8001c04:	2301      	movls	r3, #1
 8001c06:	2300      	movhi	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e006      	b.n	8001c1a <HAL_I2C_Init+0x92>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a7d      	ldr	r2, [pc, #500]	; (8001e04 <HAL_I2C_Init+0x27c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	bf94      	ite	ls
 8001c14:	2301      	movls	r3, #1
 8001c16:	2300      	movhi	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0e7      	b.n	8001df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a78      	ldr	r2, [pc, #480]	; (8001e08 <HAL_I2C_Init+0x280>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	; (8001dfc <HAL_I2C_Init+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d802      	bhi.n	8001c5c <HAL_I2C_Init+0xd4>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	e009      	b.n	8001c70 <HAL_I2C_Init+0xe8>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	4a69      	ldr	r2, [pc, #420]	; (8001e0c <HAL_I2C_Init+0x284>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	495c      	ldr	r1, [pc, #368]	; (8001dfc <HAL_I2C_Init+0x274>)
 8001c8c:	428b      	cmp	r3, r1
 8001c8e:	d819      	bhi.n	8001cc4 <HAL_I2C_Init+0x13c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e59      	subs	r1, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_I2C_Init+0x138>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	e051      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e04f      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_I2C_Init+0x168>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e012      	b.n	8001d16 <HAL_I2C_Init+0x18e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e58      	subs	r0, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Init+0x196>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e022      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10e      	bne.n	8001d44 <HAL_I2C_Init+0x1bc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e58      	subs	r0, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d42:	e00f      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	0099      	lsls	r1, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6911      	ldr	r1, [r2, #16]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68d2      	ldr	r2, [r2, #12]
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	000186a0 	.word	0x000186a0
 8001e00:	001e847f 	.word	0x001e847f
 8001e04:	003d08ff 	.word	0x003d08ff
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	4613      	mov	r3, r2
 8001e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff f8b0 	bl	8000f88 <HAL_GetTick>
 8001e28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 80e0 	bne.w	8001ff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4970      	ldr	r1, [pc, #448]	; (8002004 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fa92 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0d3      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x50>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0cc      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d007      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2221      	movs	r2, #33	; 0x21
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	893a      	ldrh	r2, [r7, #8]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f9ca 	bl	8002268 <I2C_MasterRequestWrite>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08d      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ef4:	e066      	b.n	8001fc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb50 	bl	80025a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d107      	bne.n	8001f1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d11b      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x188>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fb47 	bl	8002630 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d107      	bne.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e01a      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d194      	bne.n	8001ef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ff8:	2302      	movs	r3, #2
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	00100002 	.word	0x00100002
 8002008:	ffff0000 	.word	0xffff0000

0800200c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7fe ffb4 	bl	8000f88 <HAL_GetTick>
 8002020:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	f040 8111 	bne.w	8002256 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2319      	movs	r3, #25
 800203a:	2201      	movs	r2, #1
 800203c:	4988      	ldr	r1, [pc, #544]	; (8002260 <HAL_I2C_IsDeviceReady+0x254>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f994 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	e104      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_I2C_IsDeviceReady+0x50>
 8002058:	2302      	movs	r3, #2
 800205a:	e0fd      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d007      	beq.n	8002082 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0201 	orr.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2224      	movs	r2, #36	; 0x24
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a70      	ldr	r2, [pc, #448]	; (8002264 <HAL_I2C_IsDeviceReady+0x258>)
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f952 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020dc:	d103      	bne.n	80020e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0b6      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ea:	897b      	ldrh	r3, [r7, #10]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe ff45 	bl	8000f88 <HAL_GetTick>
 80020fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800212e:	e025      	b.n	800217c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002130:	f7fe ff2a 	bl	8000f88 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d302      	bcc.n	8002146 <HAL_I2C_IsDeviceReady+0x13a>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	22a0      	movs	r2, #160	; 0xa0
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2ba0      	cmp	r3, #160	; 0xa0
 8002186:	d005      	beq.n	8002194 <HAL_I2C_IsDeviceReady+0x188>
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_I2C_IsDeviceReady+0x188>
 800218e:	7dbb      	ldrb	r3, [r7, #22]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0cd      	beq.n	8002130 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d129      	bne.n	80021fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2319      	movs	r3, #25
 80021d6:	2201      	movs	r2, #1
 80021d8:	4921      	ldr	r1, [pc, #132]	; (8002260 <HAL_I2C_IsDeviceReady+0x254>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f8c6 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e036      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e02c      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002216:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2319      	movs	r3, #25
 800221e:	2201      	movs	r2, #1
 8002220:	490f      	ldr	r1, [pc, #60]	; (8002260 <HAL_I2C_IsDeviceReady+0x254>)
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f8a2 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e012      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3301      	adds	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	f4ff af32 	bcc.w	80020a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	00100002 	.word	0x00100002
 8002264:	ffff0000 	.word	0xffff0000

08002268 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d006      	beq.n	8002292 <I2C_MasterRequestWrite+0x2a>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d003      	beq.n	8002292 <I2C_MasterRequestWrite+0x2a>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002290:	d108      	bne.n	80022a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e00b      	b.n	80022bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d107      	bne.n	80022bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f84f 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e2:	d103      	bne.n	80022ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e035      	b.n	800235c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f8:	d108      	bne.n	800230c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002308:	611a      	str	r2, [r3, #16]
 800230a:	e01b      	b.n	8002344 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800230c:	897b      	ldrh	r3, [r7, #10]
 800230e:	11db      	asrs	r3, r3, #7
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f003 0306 	and.w	r3, r3, #6
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f063 030f 	orn	r3, r3, #15
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <I2C_MasterRequestWrite+0xfc>)
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f898 	bl	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e010      	b.n	800235c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <I2C_MasterRequestWrite+0x100>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f888 	bl	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	00010008 	.word	0x00010008
 8002368:	00010002 	.word	0x00010002

0800236c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800237c:	e048      	b.n	8002410 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d044      	beq.n	8002410 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe fdff 	bl	8000f88 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d139      	bne.n	8002410 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	0c1b      	lsrs	r3, r3, #16
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10d      	bne.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	43da      	mvns	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	4013      	ands	r3, r2
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	e00c      	b.n	80023dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	43da      	mvns	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4013      	ands	r3, r2
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d116      	bne.n	8002410 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0220 	orr.w	r2, r3, #32
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e023      	b.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0c1b      	lsrs	r3, r3, #16
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10d      	bne.n	8002436 <I2C_WaitOnFlagUntilTimeout+0xca>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	43da      	mvns	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	e00c      	b.n	8002450 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	43da      	mvns	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4013      	ands	r3, r2
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	429a      	cmp	r2, r3
 8002454:	d093      	beq.n	800237e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800246e:	e071      	b.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d123      	bne.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0204 	orr.w	r2, r3, #4
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e067      	b.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d041      	beq.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d0:	f7fe fd5a 	bl	8000f88 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d302      	bcc.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d136      	bne.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d10c      	bne.n	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4013      	ands	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	e00b      	b.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	43da      	mvns	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e021      	b.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	0c1b      	lsrs	r3, r3, #16
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10c      	bne.n	8002578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	43da      	mvns	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e00b      	b.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f af6d 	bne.w	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ac:	e034      	b.n	8002618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f886 	bl	80026c0 <I2C_IsAcknowledgeFailed>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e034      	b.n	8002628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d028      	beq.n	8002618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c6:	f7fe fcdf 	bl	8000f88 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11d      	bne.n	8002618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d016      	beq.n	8002618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	2b80      	cmp	r3, #128	; 0x80
 8002624:	d1c3      	bne.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800263c:	e034      	b.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f83e 	bl	80026c0 <I2C_IsAcknowledgeFailed>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e034      	b.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d028      	beq.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7fe fc97 	bl	8000f88 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11d      	bne.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d016      	beq.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d1c3      	bne.n	800263e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d11b      	bne.n	8002710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e272      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8087 	beq.w	800284a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b04      	cmp	r3, #4
 8002746:	d00c      	beq.n	8002762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002748:	4b8f      	ldr	r3, [pc, #572]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d112      	bne.n	800277a <HAL_RCC_OscConfig+0x5e>
 8002754:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d10b      	bne.n	800277a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d06c      	beq.n	8002848 <HAL_RCC_OscConfig+0x12c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d168      	bne.n	8002848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e24c      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x76>
 8002784:	4b80      	ldr	r3, [pc, #512]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a7f      	ldr	r2, [pc, #508]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e02e      	b.n	80027f0 <HAL_RCC_OscConfig+0xd4>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x98>
 800279a:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7a      	ldr	r2, [pc, #488]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b78      	ldr	r3, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a77      	ldr	r2, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xd4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0xbc>
 80027be:	4b72      	ldr	r3, [pc, #456]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a71      	ldr	r2, [pc, #452]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6e      	ldr	r2, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xd4>
 80027d8:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a67      	ldr	r2, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fbc6 	bl	8000f88 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fbc2 	bl	8000f88 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e200      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xe4>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fbb2 	bl	8000f88 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fbae 	bl	8000f88 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1ec      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x10c>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002856:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x18c>
 800286e:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x176>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1c0      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4939      	ldr	r1, [pc, #228]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_RCC_OscConfig+0x270>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe fb67 	bl	8000f88 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fb63 	bl	8000f88 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1a1      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4927      	ldr	r1, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x270>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fb46 	bl	8000f88 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fb42 	bl	8000f88 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e180      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03a      	beq.n	80029a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d019      	beq.n	8002966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_RCC_OscConfig+0x274>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fb26 	bl	8000f88 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fb22 	bl	8000f88 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e160      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800295e:	2001      	movs	r0, #1
 8002960:	f000 faba 	bl	8002ed8 <RCC_Delay>
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_RCC_OscConfig+0x274>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe fb0c 	bl	8000f88 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002972:	e00f      	b.n	8002994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fb08 	bl	8000f88 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d908      	bls.n	8002994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e146      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	42420000 	.word	0x42420000
 8002990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	4b92      	ldr	r3, [pc, #584]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e9      	bne.n	8002974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a6 	beq.w	8002afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b8b      	ldr	r3, [pc, #556]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4a87      	ldr	r2, [pc, #540]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	61d3      	str	r3, [r2, #28]
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b82      	ldr	r3, [pc, #520]	; (8002be4 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4b7f      	ldr	r3, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x4c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7e      	ldr	r2, [pc, #504]	; (8002be4 <HAL_RCC_OscConfig+0x4c8>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fac9 	bl	8000f88 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe fac5 	bl	8000f88 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b64      	cmp	r3, #100	; 0x64
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e103      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_OscConfig+0x4c8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x312>
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4a6e      	ldr	r2, [pc, #440]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	e02d      	b.n	8002a8a <HAL_RCC_OscConfig+0x36e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x334>
 8002a36:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a69      	ldr	r2, [pc, #420]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a66      	ldr	r2, [pc, #408]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	e01c      	b.n	8002a8a <HAL_RCC_OscConfig+0x36e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x356>
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a60      	ldr	r2, [pc, #384]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a5d      	ldr	r2, [pc, #372]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0x36e>
 8002a72:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a5a      	ldr	r2, [pc, #360]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6213      	str	r3, [r2, #32]
 8002a7e:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a57      	ldr	r2, [pc, #348]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	f023 0304 	bic.w	r3, r3, #4
 8002a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fa79 	bl	8000f88 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe fa75 	bl	8000f88 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0b1      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ee      	beq.n	8002a9a <HAL_RCC_OscConfig+0x37e>
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fa63 	bl	8000f88 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe fa5f 	bl	8000f88 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e09b      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d105      	bne.n	8002afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aee:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8087 	beq.w	8002c12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d061      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d146      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <HAL_RCC_OscConfig+0x4cc>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fa33 	bl	8000f88 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe fa2f 	bl	8000f88 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e06d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4c:	d108      	bne.n	8002b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4921      	ldr	r1, [pc, #132]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b60:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a19      	ldr	r1, [r3, #32]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	430b      	orrs	r3, r1
 8002b72:	491b      	ldr	r1, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fa03 	bl	8000f88 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe f9ff 	bl	8000f88 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e03d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46a>
 8002ba4:	e035      	b.n	8002c12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCC_OscConfig+0x4cc>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe f9ec 	bl	8000f88 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe f9e8 	bl	8000f88 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e026      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x498>
 8002bd2:	e01e      	b.n	8002c12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e019      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_OscConfig+0x500>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0d0      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4965      	ldr	r1, [pc, #404]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b8      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	494d      	ldr	r1, [pc, #308]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d040      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e073      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06b      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4936      	ldr	r1, [pc, #216]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fe f93a 	bl	8000f88 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fe f936 	bl	8000f88 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e053      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d210      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4922      	ldr	r1, [pc, #136]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e032      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4916      	ldr	r1, [pc, #88]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	490e      	ldr	r1, [pc, #56]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dae:	f000 f821 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	490a      	ldr	r1, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	5ccb      	ldrb	r3, [r1, r3]
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1cc>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f898 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08004798 	.word	0x08004798
 8002dec:	20000008 	.word	0x20000008
 8002df0:	2000000c 	.word	0x2000000c

08002df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x30>
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x36>
 8002e22:	e027      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e26:	613b      	str	r3, [r7, #16]
      break;
 8002e28:	e027      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0c9b      	lsrs	r3, r3, #18
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
 8002e36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0c5b      	lsrs	r3, r3, #17
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e56:	fb03 f202 	mul.w	r2, r3, r2
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e004      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	613b      	str	r3, [r7, #16]
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e76:	613b      	str	r3, [r7, #16]
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	693b      	ldr	r3, [r7, #16]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	007a1200 	.word	0x007a1200
 8002e90:	080047b0 	.word	0x080047b0
 8002e94:	080047c0 	.word	0x080047c0
 8002e98:	003d0900 	.word	0x003d0900

08002e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea0:	4b02      	ldr	r3, [pc, #8]	; (8002eac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	20000008 	.word	0x20000008

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff2 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	080047a8 	.word	0x080047a8

08002ed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <RCC_Delay+0x34>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <RCC_Delay+0x38>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0a5b      	lsrs	r3, r3, #9
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ef4:	bf00      	nop
  }
  while (Delay --);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1e5a      	subs	r2, r3, #1
 8002efa:	60fa      	str	r2, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <RCC_Delay+0x1c>
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	10624dd3 	.word	0x10624dd3

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d07d      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f34:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	61d3      	str	r3, [r2, #28]
 8002f4c:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d118      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f68:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a42      	ldr	r2, [pc, #264]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f74:	f7fe f808 	bl	8000f88 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	e008      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fe f804 	bl	8000f88 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e06d      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f9a:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02e      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d027      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fce:	4a29      	ldr	r2, [pc, #164]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fd ffd3 	bl	8000f88 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fd ffcf 	bl	8000f88 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e036      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ee      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4917      	ldr	r1, [pc, #92]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003016:	4313      	orrs	r3, r2
 8003018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	490b      	ldr	r1, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4904      	ldr	r1, [pc, #16]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
 800307c:	42420440 	.word	0x42420440

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	; (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000014 	.word	0x20000014

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	; (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	; (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f000 fcb0 	bl	8003a00 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	; (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	080047f8 	.word	0x080047f8
 80030c8:	080047f8 	.word	0x080047f8
 80030cc:	080047f8 	.word	0x080047f8
 80030d0:	080047fc 	.word	0x080047fc

080030d4 <memset>:
 80030d4:	4603      	mov	r3, r0
 80030d6:	4402      	add	r2, r0
 80030d8:	4293      	cmp	r3, r2
 80030da:	d100      	bne.n	80030de <memset+0xa>
 80030dc:	4770      	bx	lr
 80030de:	f803 1b01 	strb.w	r1, [r3], #1
 80030e2:	e7f9      	b.n	80030d8 <memset+0x4>

080030e4 <sniprintf>:
 80030e4:	b40c      	push	{r2, r3}
 80030e6:	b530      	push	{r4, r5, lr}
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <sniprintf+0x64>)
 80030ea:	1e0c      	subs	r4, r1, #0
 80030ec:	681d      	ldr	r5, [r3, #0]
 80030ee:	b09d      	sub	sp, #116	; 0x74
 80030f0:	da08      	bge.n	8003104 <sniprintf+0x20>
 80030f2:	238b      	movs	r3, #139	; 0x8b
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	602b      	str	r3, [r5, #0]
 80030fa:	b01d      	add	sp, #116	; 0x74
 80030fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003100:	b002      	add	sp, #8
 8003102:	4770      	bx	lr
 8003104:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800310c:	bf0c      	ite	eq
 800310e:	4623      	moveq	r3, r4
 8003110:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003114:	9304      	str	r3, [sp, #16]
 8003116:	9307      	str	r3, [sp, #28]
 8003118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800311c:	9002      	str	r0, [sp, #8]
 800311e:	9006      	str	r0, [sp, #24]
 8003120:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003124:	4628      	mov	r0, r5
 8003126:	ab21      	add	r3, sp, #132	; 0x84
 8003128:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800312a:	a902      	add	r1, sp, #8
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	f000 f869 	bl	8003204 <_svfiprintf_r>
 8003132:	1c43      	adds	r3, r0, #1
 8003134:	bfbc      	itt	lt
 8003136:	238b      	movlt	r3, #139	; 0x8b
 8003138:	602b      	strlt	r3, [r5, #0]
 800313a:	2c00      	cmp	r4, #0
 800313c:	d0dd      	beq.n	80030fa <sniprintf+0x16>
 800313e:	2200      	movs	r2, #0
 8003140:	9b02      	ldr	r3, [sp, #8]
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e7d9      	b.n	80030fa <sniprintf+0x16>
 8003146:	bf00      	nop
 8003148:	20000014 	.word	0x20000014

0800314c <__ssputs_r>:
 800314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003150:	688e      	ldr	r6, [r1, #8]
 8003152:	4682      	mov	sl, r0
 8003154:	429e      	cmp	r6, r3
 8003156:	460c      	mov	r4, r1
 8003158:	4690      	mov	r8, r2
 800315a:	461f      	mov	r7, r3
 800315c:	d838      	bhi.n	80031d0 <__ssputs_r+0x84>
 800315e:	898a      	ldrh	r2, [r1, #12]
 8003160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003164:	d032      	beq.n	80031cc <__ssputs_r+0x80>
 8003166:	6825      	ldr	r5, [r4, #0]
 8003168:	6909      	ldr	r1, [r1, #16]
 800316a:	3301      	adds	r3, #1
 800316c:	eba5 0901 	sub.w	r9, r5, r1
 8003170:	6965      	ldr	r5, [r4, #20]
 8003172:	444b      	add	r3, r9
 8003174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800317c:	106d      	asrs	r5, r5, #1
 800317e:	429d      	cmp	r5, r3
 8003180:	bf38      	it	cc
 8003182:	461d      	movcc	r5, r3
 8003184:	0553      	lsls	r3, r2, #21
 8003186:	d531      	bpl.n	80031ec <__ssputs_r+0xa0>
 8003188:	4629      	mov	r1, r5
 800318a:	f000 fb6f 	bl	800386c <_malloc_r>
 800318e:	4606      	mov	r6, r0
 8003190:	b950      	cbnz	r0, 80031a8 <__ssputs_r+0x5c>
 8003192:	230c      	movs	r3, #12
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	f8ca 3000 	str.w	r3, [sl]
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a8:	464a      	mov	r2, r9
 80031aa:	6921      	ldr	r1, [r4, #16]
 80031ac:	f000 face 	bl	800374c <memcpy>
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	6126      	str	r6, [r4, #16]
 80031be:	444e      	add	r6, r9
 80031c0:	6026      	str	r6, [r4, #0]
 80031c2:	463e      	mov	r6, r7
 80031c4:	6165      	str	r5, [r4, #20]
 80031c6:	eba5 0509 	sub.w	r5, r5, r9
 80031ca:	60a5      	str	r5, [r4, #8]
 80031cc:	42be      	cmp	r6, r7
 80031ce:	d900      	bls.n	80031d2 <__ssputs_r+0x86>
 80031d0:	463e      	mov	r6, r7
 80031d2:	4632      	mov	r2, r6
 80031d4:	4641      	mov	r1, r8
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	f000 fac6 	bl	8003768 <memmove>
 80031dc:	68a3      	ldr	r3, [r4, #8]
 80031de:	2000      	movs	r0, #0
 80031e0:	1b9b      	subs	r3, r3, r6
 80031e2:	60a3      	str	r3, [r4, #8]
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	4433      	add	r3, r6
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	e7db      	b.n	80031a4 <__ssputs_r+0x58>
 80031ec:	462a      	mov	r2, r5
 80031ee:	f000 fbb1 	bl	8003954 <_realloc_r>
 80031f2:	4606      	mov	r6, r0
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d1e1      	bne.n	80031bc <__ssputs_r+0x70>
 80031f8:	4650      	mov	r0, sl
 80031fa:	6921      	ldr	r1, [r4, #16]
 80031fc:	f000 face 	bl	800379c <_free_r>
 8003200:	e7c7      	b.n	8003192 <__ssputs_r+0x46>
	...

08003204 <_svfiprintf_r>:
 8003204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003208:	4698      	mov	r8, r3
 800320a:	898b      	ldrh	r3, [r1, #12]
 800320c:	4607      	mov	r7, r0
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	460d      	mov	r5, r1
 8003212:	4614      	mov	r4, r2
 8003214:	b09d      	sub	sp, #116	; 0x74
 8003216:	d50e      	bpl.n	8003236 <_svfiprintf_r+0x32>
 8003218:	690b      	ldr	r3, [r1, #16]
 800321a:	b963      	cbnz	r3, 8003236 <_svfiprintf_r+0x32>
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	f000 fb25 	bl	800386c <_malloc_r>
 8003222:	6028      	str	r0, [r5, #0]
 8003224:	6128      	str	r0, [r5, #16]
 8003226:	b920      	cbnz	r0, 8003232 <_svfiprintf_r+0x2e>
 8003228:	230c      	movs	r3, #12
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	e0d1      	b.n	80033d6 <_svfiprintf_r+0x1d2>
 8003232:	2340      	movs	r3, #64	; 0x40
 8003234:	616b      	str	r3, [r5, #20]
 8003236:	2300      	movs	r3, #0
 8003238:	9309      	str	r3, [sp, #36]	; 0x24
 800323a:	2320      	movs	r3, #32
 800323c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003240:	2330      	movs	r3, #48	; 0x30
 8003242:	f04f 0901 	mov.w	r9, #1
 8003246:	f8cd 800c 	str.w	r8, [sp, #12]
 800324a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033f0 <_svfiprintf_r+0x1ec>
 800324e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003252:	4623      	mov	r3, r4
 8003254:	469a      	mov	sl, r3
 8003256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800325a:	b10a      	cbz	r2, 8003260 <_svfiprintf_r+0x5c>
 800325c:	2a25      	cmp	r2, #37	; 0x25
 800325e:	d1f9      	bne.n	8003254 <_svfiprintf_r+0x50>
 8003260:	ebba 0b04 	subs.w	fp, sl, r4
 8003264:	d00b      	beq.n	800327e <_svfiprintf_r+0x7a>
 8003266:	465b      	mov	r3, fp
 8003268:	4622      	mov	r2, r4
 800326a:	4629      	mov	r1, r5
 800326c:	4638      	mov	r0, r7
 800326e:	f7ff ff6d 	bl	800314c <__ssputs_r>
 8003272:	3001      	adds	r0, #1
 8003274:	f000 80aa 	beq.w	80033cc <_svfiprintf_r+0x1c8>
 8003278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800327a:	445a      	add	r2, fp
 800327c:	9209      	str	r2, [sp, #36]	; 0x24
 800327e:	f89a 3000 	ldrb.w	r3, [sl]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80a2 	beq.w	80033cc <_svfiprintf_r+0x1c8>
 8003288:	2300      	movs	r3, #0
 800328a:	f04f 32ff 	mov.w	r2, #4294967295
 800328e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003292:	f10a 0a01 	add.w	sl, sl, #1
 8003296:	9304      	str	r3, [sp, #16]
 8003298:	9307      	str	r3, [sp, #28]
 800329a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800329e:	931a      	str	r3, [sp, #104]	; 0x68
 80032a0:	4654      	mov	r4, sl
 80032a2:	2205      	movs	r2, #5
 80032a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a8:	4851      	ldr	r0, [pc, #324]	; (80033f0 <_svfiprintf_r+0x1ec>)
 80032aa:	f000 fa41 	bl	8003730 <memchr>
 80032ae:	9a04      	ldr	r2, [sp, #16]
 80032b0:	b9d8      	cbnz	r0, 80032ea <_svfiprintf_r+0xe6>
 80032b2:	06d0      	lsls	r0, r2, #27
 80032b4:	bf44      	itt	mi
 80032b6:	2320      	movmi	r3, #32
 80032b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032bc:	0711      	lsls	r1, r2, #28
 80032be:	bf44      	itt	mi
 80032c0:	232b      	movmi	r3, #43	; 0x2b
 80032c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ca:	2b2a      	cmp	r3, #42	; 0x2a
 80032cc:	d015      	beq.n	80032fa <_svfiprintf_r+0xf6>
 80032ce:	4654      	mov	r4, sl
 80032d0:	2000      	movs	r0, #0
 80032d2:	f04f 0c0a 	mov.w	ip, #10
 80032d6:	9a07      	ldr	r2, [sp, #28]
 80032d8:	4621      	mov	r1, r4
 80032da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032de:	3b30      	subs	r3, #48	; 0x30
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	d94e      	bls.n	8003382 <_svfiprintf_r+0x17e>
 80032e4:	b1b0      	cbz	r0, 8003314 <_svfiprintf_r+0x110>
 80032e6:	9207      	str	r2, [sp, #28]
 80032e8:	e014      	b.n	8003314 <_svfiprintf_r+0x110>
 80032ea:	eba0 0308 	sub.w	r3, r0, r8
 80032ee:	fa09 f303 	lsl.w	r3, r9, r3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	46a2      	mov	sl, r4
 80032f6:	9304      	str	r3, [sp, #16]
 80032f8:	e7d2      	b.n	80032a0 <_svfiprintf_r+0x9c>
 80032fa:	9b03      	ldr	r3, [sp, #12]
 80032fc:	1d19      	adds	r1, r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	9103      	str	r1, [sp, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	bfbb      	ittet	lt
 8003306:	425b      	neglt	r3, r3
 8003308:	f042 0202 	orrlt.w	r2, r2, #2
 800330c:	9307      	strge	r3, [sp, #28]
 800330e:	9307      	strlt	r3, [sp, #28]
 8003310:	bfb8      	it	lt
 8003312:	9204      	strlt	r2, [sp, #16]
 8003314:	7823      	ldrb	r3, [r4, #0]
 8003316:	2b2e      	cmp	r3, #46	; 0x2e
 8003318:	d10c      	bne.n	8003334 <_svfiprintf_r+0x130>
 800331a:	7863      	ldrb	r3, [r4, #1]
 800331c:	2b2a      	cmp	r3, #42	; 0x2a
 800331e:	d135      	bne.n	800338c <_svfiprintf_r+0x188>
 8003320:	9b03      	ldr	r3, [sp, #12]
 8003322:	3402      	adds	r4, #2
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	9203      	str	r2, [sp, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	bfb8      	it	lt
 800332e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003332:	9305      	str	r3, [sp, #20]
 8003334:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80033f4 <_svfiprintf_r+0x1f0>
 8003338:	2203      	movs	r2, #3
 800333a:	4650      	mov	r0, sl
 800333c:	7821      	ldrb	r1, [r4, #0]
 800333e:	f000 f9f7 	bl	8003730 <memchr>
 8003342:	b140      	cbz	r0, 8003356 <_svfiprintf_r+0x152>
 8003344:	2340      	movs	r3, #64	; 0x40
 8003346:	eba0 000a 	sub.w	r0, r0, sl
 800334a:	fa03 f000 	lsl.w	r0, r3, r0
 800334e:	9b04      	ldr	r3, [sp, #16]
 8003350:	3401      	adds	r4, #1
 8003352:	4303      	orrs	r3, r0
 8003354:	9304      	str	r3, [sp, #16]
 8003356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800335a:	2206      	movs	r2, #6
 800335c:	4826      	ldr	r0, [pc, #152]	; (80033f8 <_svfiprintf_r+0x1f4>)
 800335e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003362:	f000 f9e5 	bl	8003730 <memchr>
 8003366:	2800      	cmp	r0, #0
 8003368:	d038      	beq.n	80033dc <_svfiprintf_r+0x1d8>
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <_svfiprintf_r+0x1f8>)
 800336c:	bb1b      	cbnz	r3, 80033b6 <_svfiprintf_r+0x1b2>
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	3307      	adds	r3, #7
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	3308      	adds	r3, #8
 8003378:	9303      	str	r3, [sp, #12]
 800337a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800337c:	4433      	add	r3, r6
 800337e:	9309      	str	r3, [sp, #36]	; 0x24
 8003380:	e767      	b.n	8003252 <_svfiprintf_r+0x4e>
 8003382:	460c      	mov	r4, r1
 8003384:	2001      	movs	r0, #1
 8003386:	fb0c 3202 	mla	r2, ip, r2, r3
 800338a:	e7a5      	b.n	80032d8 <_svfiprintf_r+0xd4>
 800338c:	2300      	movs	r3, #0
 800338e:	f04f 0c0a 	mov.w	ip, #10
 8003392:	4619      	mov	r1, r3
 8003394:	3401      	adds	r4, #1
 8003396:	9305      	str	r3, [sp, #20]
 8003398:	4620      	mov	r0, r4
 800339a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800339e:	3a30      	subs	r2, #48	; 0x30
 80033a0:	2a09      	cmp	r2, #9
 80033a2:	d903      	bls.n	80033ac <_svfiprintf_r+0x1a8>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0c5      	beq.n	8003334 <_svfiprintf_r+0x130>
 80033a8:	9105      	str	r1, [sp, #20]
 80033aa:	e7c3      	b.n	8003334 <_svfiprintf_r+0x130>
 80033ac:	4604      	mov	r4, r0
 80033ae:	2301      	movs	r3, #1
 80033b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033b4:	e7f0      	b.n	8003398 <_svfiprintf_r+0x194>
 80033b6:	ab03      	add	r3, sp, #12
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	462a      	mov	r2, r5
 80033bc:	4638      	mov	r0, r7
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <_svfiprintf_r+0x1fc>)
 80033c0:	a904      	add	r1, sp, #16
 80033c2:	f3af 8000 	nop.w
 80033c6:	1c42      	adds	r2, r0, #1
 80033c8:	4606      	mov	r6, r0
 80033ca:	d1d6      	bne.n	800337a <_svfiprintf_r+0x176>
 80033cc:	89ab      	ldrh	r3, [r5, #12]
 80033ce:	065b      	lsls	r3, r3, #25
 80033d0:	f53f af2c 	bmi.w	800322c <_svfiprintf_r+0x28>
 80033d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033d6:	b01d      	add	sp, #116	; 0x74
 80033d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033dc:	ab03      	add	r3, sp, #12
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	462a      	mov	r2, r5
 80033e2:	4638      	mov	r0, r7
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <_svfiprintf_r+0x1fc>)
 80033e6:	a904      	add	r1, sp, #16
 80033e8:	f000 f87c 	bl	80034e4 <_printf_i>
 80033ec:	e7eb      	b.n	80033c6 <_svfiprintf_r+0x1c2>
 80033ee:	bf00      	nop
 80033f0:	080047c2 	.word	0x080047c2
 80033f4:	080047c8 	.word	0x080047c8
 80033f8:	080047cc 	.word	0x080047cc
 80033fc:	00000000 	.word	0x00000000
 8003400:	0800314d 	.word	0x0800314d

08003404 <_printf_common>:
 8003404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003408:	4616      	mov	r6, r2
 800340a:	4699      	mov	r9, r3
 800340c:	688a      	ldr	r2, [r1, #8]
 800340e:	690b      	ldr	r3, [r1, #16]
 8003410:	4607      	mov	r7, r0
 8003412:	4293      	cmp	r3, r2
 8003414:	bfb8      	it	lt
 8003416:	4613      	movlt	r3, r2
 8003418:	6033      	str	r3, [r6, #0]
 800341a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800341e:	460c      	mov	r4, r1
 8003420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003424:	b10a      	cbz	r2, 800342a <_printf_common+0x26>
 8003426:	3301      	adds	r3, #1
 8003428:	6033      	str	r3, [r6, #0]
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	0699      	lsls	r1, r3, #26
 800342e:	bf42      	ittt	mi
 8003430:	6833      	ldrmi	r3, [r6, #0]
 8003432:	3302      	addmi	r3, #2
 8003434:	6033      	strmi	r3, [r6, #0]
 8003436:	6825      	ldr	r5, [r4, #0]
 8003438:	f015 0506 	ands.w	r5, r5, #6
 800343c:	d106      	bne.n	800344c <_printf_common+0x48>
 800343e:	f104 0a19 	add.w	sl, r4, #25
 8003442:	68e3      	ldr	r3, [r4, #12]
 8003444:	6832      	ldr	r2, [r6, #0]
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	42ab      	cmp	r3, r5
 800344a:	dc28      	bgt.n	800349e <_printf_common+0x9a>
 800344c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003450:	1e13      	subs	r3, r2, #0
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	bf18      	it	ne
 8003456:	2301      	movne	r3, #1
 8003458:	0692      	lsls	r2, r2, #26
 800345a:	d42d      	bmi.n	80034b8 <_printf_common+0xb4>
 800345c:	4649      	mov	r1, r9
 800345e:	4638      	mov	r0, r7
 8003460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003464:	47c0      	blx	r8
 8003466:	3001      	adds	r0, #1
 8003468:	d020      	beq.n	80034ac <_printf_common+0xa8>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	68e5      	ldr	r5, [r4, #12]
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	2b04      	cmp	r3, #4
 8003474:	bf18      	it	ne
 8003476:	2500      	movne	r5, #0
 8003478:	6832      	ldr	r2, [r6, #0]
 800347a:	f04f 0600 	mov.w	r6, #0
 800347e:	68a3      	ldr	r3, [r4, #8]
 8003480:	bf08      	it	eq
 8003482:	1aad      	subeq	r5, r5, r2
 8003484:	6922      	ldr	r2, [r4, #16]
 8003486:	bf08      	it	eq
 8003488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800348c:	4293      	cmp	r3, r2
 800348e:	bfc4      	itt	gt
 8003490:	1a9b      	subgt	r3, r3, r2
 8003492:	18ed      	addgt	r5, r5, r3
 8003494:	341a      	adds	r4, #26
 8003496:	42b5      	cmp	r5, r6
 8003498:	d11a      	bne.n	80034d0 <_printf_common+0xcc>
 800349a:	2000      	movs	r0, #0
 800349c:	e008      	b.n	80034b0 <_printf_common+0xac>
 800349e:	2301      	movs	r3, #1
 80034a0:	4652      	mov	r2, sl
 80034a2:	4649      	mov	r1, r9
 80034a4:	4638      	mov	r0, r7
 80034a6:	47c0      	blx	r8
 80034a8:	3001      	adds	r0, #1
 80034aa:	d103      	bne.n	80034b4 <_printf_common+0xb0>
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b4:	3501      	adds	r5, #1
 80034b6:	e7c4      	b.n	8003442 <_printf_common+0x3e>
 80034b8:	2030      	movs	r0, #48	; 0x30
 80034ba:	18e1      	adds	r1, r4, r3
 80034bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034c6:	4422      	add	r2, r4
 80034c8:	3302      	adds	r3, #2
 80034ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ce:	e7c5      	b.n	800345c <_printf_common+0x58>
 80034d0:	2301      	movs	r3, #1
 80034d2:	4622      	mov	r2, r4
 80034d4:	4649      	mov	r1, r9
 80034d6:	4638      	mov	r0, r7
 80034d8:	47c0      	blx	r8
 80034da:	3001      	adds	r0, #1
 80034dc:	d0e6      	beq.n	80034ac <_printf_common+0xa8>
 80034de:	3601      	adds	r6, #1
 80034e0:	e7d9      	b.n	8003496 <_printf_common+0x92>
	...

080034e4 <_printf_i>:
 80034e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	7e0f      	ldrb	r7, [r1, #24]
 80034ea:	4691      	mov	r9, r2
 80034ec:	2f78      	cmp	r7, #120	; 0x78
 80034ee:	4680      	mov	r8, r0
 80034f0:	460c      	mov	r4, r1
 80034f2:	469a      	mov	sl, r3
 80034f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034fa:	d807      	bhi.n	800350c <_printf_i+0x28>
 80034fc:	2f62      	cmp	r7, #98	; 0x62
 80034fe:	d80a      	bhi.n	8003516 <_printf_i+0x32>
 8003500:	2f00      	cmp	r7, #0
 8003502:	f000 80d9 	beq.w	80036b8 <_printf_i+0x1d4>
 8003506:	2f58      	cmp	r7, #88	; 0x58
 8003508:	f000 80a4 	beq.w	8003654 <_printf_i+0x170>
 800350c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003514:	e03a      	b.n	800358c <_printf_i+0xa8>
 8003516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800351a:	2b15      	cmp	r3, #21
 800351c:	d8f6      	bhi.n	800350c <_printf_i+0x28>
 800351e:	a101      	add	r1, pc, #4	; (adr r1, 8003524 <_printf_i+0x40>)
 8003520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003524:	0800357d 	.word	0x0800357d
 8003528:	08003591 	.word	0x08003591
 800352c:	0800350d 	.word	0x0800350d
 8003530:	0800350d 	.word	0x0800350d
 8003534:	0800350d 	.word	0x0800350d
 8003538:	0800350d 	.word	0x0800350d
 800353c:	08003591 	.word	0x08003591
 8003540:	0800350d 	.word	0x0800350d
 8003544:	0800350d 	.word	0x0800350d
 8003548:	0800350d 	.word	0x0800350d
 800354c:	0800350d 	.word	0x0800350d
 8003550:	0800369f 	.word	0x0800369f
 8003554:	080035c1 	.word	0x080035c1
 8003558:	08003681 	.word	0x08003681
 800355c:	0800350d 	.word	0x0800350d
 8003560:	0800350d 	.word	0x0800350d
 8003564:	080036c1 	.word	0x080036c1
 8003568:	0800350d 	.word	0x0800350d
 800356c:	080035c1 	.word	0x080035c1
 8003570:	0800350d 	.word	0x0800350d
 8003574:	0800350d 	.word	0x0800350d
 8003578:	08003689 	.word	0x08003689
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	1d1a      	adds	r2, r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	602a      	str	r2, [r5, #0]
 8003584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800358c:	2301      	movs	r3, #1
 800358e:	e0a4      	b.n	80036da <_printf_i+0x1f6>
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	6829      	ldr	r1, [r5, #0]
 8003594:	0606      	lsls	r6, r0, #24
 8003596:	f101 0304 	add.w	r3, r1, #4
 800359a:	d50a      	bpl.n	80035b2 <_printf_i+0xce>
 800359c:	680e      	ldr	r6, [r1, #0]
 800359e:	602b      	str	r3, [r5, #0]
 80035a0:	2e00      	cmp	r6, #0
 80035a2:	da03      	bge.n	80035ac <_printf_i+0xc8>
 80035a4:	232d      	movs	r3, #45	; 0x2d
 80035a6:	4276      	negs	r6, r6
 80035a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ac:	230a      	movs	r3, #10
 80035ae:	485e      	ldr	r0, [pc, #376]	; (8003728 <_printf_i+0x244>)
 80035b0:	e019      	b.n	80035e6 <_printf_i+0x102>
 80035b2:	680e      	ldr	r6, [r1, #0]
 80035b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035b8:	602b      	str	r3, [r5, #0]
 80035ba:	bf18      	it	ne
 80035bc:	b236      	sxthne	r6, r6
 80035be:	e7ef      	b.n	80035a0 <_printf_i+0xbc>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	1d19      	adds	r1, r3, #4
 80035c6:	6029      	str	r1, [r5, #0]
 80035c8:	0601      	lsls	r1, r0, #24
 80035ca:	d501      	bpl.n	80035d0 <_printf_i+0xec>
 80035cc:	681e      	ldr	r6, [r3, #0]
 80035ce:	e002      	b.n	80035d6 <_printf_i+0xf2>
 80035d0:	0646      	lsls	r6, r0, #25
 80035d2:	d5fb      	bpl.n	80035cc <_printf_i+0xe8>
 80035d4:	881e      	ldrh	r6, [r3, #0]
 80035d6:	2f6f      	cmp	r7, #111	; 0x6f
 80035d8:	bf0c      	ite	eq
 80035da:	2308      	moveq	r3, #8
 80035dc:	230a      	movne	r3, #10
 80035de:	4852      	ldr	r0, [pc, #328]	; (8003728 <_printf_i+0x244>)
 80035e0:	2100      	movs	r1, #0
 80035e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035e6:	6865      	ldr	r5, [r4, #4]
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	bfa8      	it	ge
 80035ec:	6821      	ldrge	r1, [r4, #0]
 80035ee:	60a5      	str	r5, [r4, #8]
 80035f0:	bfa4      	itt	ge
 80035f2:	f021 0104 	bicge.w	r1, r1, #4
 80035f6:	6021      	strge	r1, [r4, #0]
 80035f8:	b90e      	cbnz	r6, 80035fe <_printf_i+0x11a>
 80035fa:	2d00      	cmp	r5, #0
 80035fc:	d04d      	beq.n	800369a <_printf_i+0x1b6>
 80035fe:	4615      	mov	r5, r2
 8003600:	fbb6 f1f3 	udiv	r1, r6, r3
 8003604:	fb03 6711 	mls	r7, r3, r1, r6
 8003608:	5dc7      	ldrb	r7, [r0, r7]
 800360a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800360e:	4637      	mov	r7, r6
 8003610:	42bb      	cmp	r3, r7
 8003612:	460e      	mov	r6, r1
 8003614:	d9f4      	bls.n	8003600 <_printf_i+0x11c>
 8003616:	2b08      	cmp	r3, #8
 8003618:	d10b      	bne.n	8003632 <_printf_i+0x14e>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	07de      	lsls	r6, r3, #31
 800361e:	d508      	bpl.n	8003632 <_printf_i+0x14e>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	6861      	ldr	r1, [r4, #4]
 8003624:	4299      	cmp	r1, r3
 8003626:	bfde      	ittt	le
 8003628:	2330      	movle	r3, #48	; 0x30
 800362a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800362e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003632:	1b52      	subs	r2, r2, r5
 8003634:	6122      	str	r2, [r4, #16]
 8003636:	464b      	mov	r3, r9
 8003638:	4621      	mov	r1, r4
 800363a:	4640      	mov	r0, r8
 800363c:	f8cd a000 	str.w	sl, [sp]
 8003640:	aa03      	add	r2, sp, #12
 8003642:	f7ff fedf 	bl	8003404 <_printf_common>
 8003646:	3001      	adds	r0, #1
 8003648:	d14c      	bne.n	80036e4 <_printf_i+0x200>
 800364a:	f04f 30ff 	mov.w	r0, #4294967295
 800364e:	b004      	add	sp, #16
 8003650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003654:	4834      	ldr	r0, [pc, #208]	; (8003728 <_printf_i+0x244>)
 8003656:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800365a:	6829      	ldr	r1, [r5, #0]
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003662:	6029      	str	r1, [r5, #0]
 8003664:	061d      	lsls	r5, r3, #24
 8003666:	d514      	bpl.n	8003692 <_printf_i+0x1ae>
 8003668:	07df      	lsls	r7, r3, #31
 800366a:	bf44      	itt	mi
 800366c:	f043 0320 	orrmi.w	r3, r3, #32
 8003670:	6023      	strmi	r3, [r4, #0]
 8003672:	b91e      	cbnz	r6, 800367c <_printf_i+0x198>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	f023 0320 	bic.w	r3, r3, #32
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	2310      	movs	r3, #16
 800367e:	e7af      	b.n	80035e0 <_printf_i+0xfc>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	2378      	movs	r3, #120	; 0x78
 800368a:	4828      	ldr	r0, [pc, #160]	; (800372c <_printf_i+0x248>)
 800368c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003690:	e7e3      	b.n	800365a <_printf_i+0x176>
 8003692:	0659      	lsls	r1, r3, #25
 8003694:	bf48      	it	mi
 8003696:	b2b6      	uxthmi	r6, r6
 8003698:	e7e6      	b.n	8003668 <_printf_i+0x184>
 800369a:	4615      	mov	r5, r2
 800369c:	e7bb      	b.n	8003616 <_printf_i+0x132>
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	6826      	ldr	r6, [r4, #0]
 80036a2:	1d18      	adds	r0, r3, #4
 80036a4:	6961      	ldr	r1, [r4, #20]
 80036a6:	6028      	str	r0, [r5, #0]
 80036a8:	0635      	lsls	r5, r6, #24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	d501      	bpl.n	80036b2 <_printf_i+0x1ce>
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	e002      	b.n	80036b8 <_printf_i+0x1d4>
 80036b2:	0670      	lsls	r0, r6, #25
 80036b4:	d5fb      	bpl.n	80036ae <_printf_i+0x1ca>
 80036b6:	8019      	strh	r1, [r3, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	4615      	mov	r5, r2
 80036bc:	6123      	str	r3, [r4, #16]
 80036be:	e7ba      	b.n	8003636 <_printf_i+0x152>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	2100      	movs	r1, #0
 80036c4:	1d1a      	adds	r2, r3, #4
 80036c6:	602a      	str	r2, [r5, #0]
 80036c8:	681d      	ldr	r5, [r3, #0]
 80036ca:	6862      	ldr	r2, [r4, #4]
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 f82f 	bl	8003730 <memchr>
 80036d2:	b108      	cbz	r0, 80036d8 <_printf_i+0x1f4>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	6060      	str	r0, [r4, #4]
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036e2:	e7a8      	b.n	8003636 <_printf_i+0x152>
 80036e4:	462a      	mov	r2, r5
 80036e6:	4649      	mov	r1, r9
 80036e8:	4640      	mov	r0, r8
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	47d0      	blx	sl
 80036ee:	3001      	adds	r0, #1
 80036f0:	d0ab      	beq.n	800364a <_printf_i+0x166>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	079b      	lsls	r3, r3, #30
 80036f6:	d413      	bmi.n	8003720 <_printf_i+0x23c>
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	4298      	cmp	r0, r3
 80036fe:	bfb8      	it	lt
 8003700:	4618      	movlt	r0, r3
 8003702:	e7a4      	b.n	800364e <_printf_i+0x16a>
 8003704:	2301      	movs	r3, #1
 8003706:	4632      	mov	r2, r6
 8003708:	4649      	mov	r1, r9
 800370a:	4640      	mov	r0, r8
 800370c:	47d0      	blx	sl
 800370e:	3001      	adds	r0, #1
 8003710:	d09b      	beq.n	800364a <_printf_i+0x166>
 8003712:	3501      	adds	r5, #1
 8003714:	68e3      	ldr	r3, [r4, #12]
 8003716:	9903      	ldr	r1, [sp, #12]
 8003718:	1a5b      	subs	r3, r3, r1
 800371a:	42ab      	cmp	r3, r5
 800371c:	dcf2      	bgt.n	8003704 <_printf_i+0x220>
 800371e:	e7eb      	b.n	80036f8 <_printf_i+0x214>
 8003720:	2500      	movs	r5, #0
 8003722:	f104 0619 	add.w	r6, r4, #25
 8003726:	e7f5      	b.n	8003714 <_printf_i+0x230>
 8003728:	080047d3 	.word	0x080047d3
 800372c:	080047e4 	.word	0x080047e4

08003730 <memchr>:
 8003730:	4603      	mov	r3, r0
 8003732:	b510      	push	{r4, lr}
 8003734:	b2c9      	uxtb	r1, r1
 8003736:	4402      	add	r2, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	4618      	mov	r0, r3
 800373c:	d101      	bne.n	8003742 <memchr+0x12>
 800373e:	2000      	movs	r0, #0
 8003740:	e003      	b.n	800374a <memchr+0x1a>
 8003742:	7804      	ldrb	r4, [r0, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	428c      	cmp	r4, r1
 8003748:	d1f6      	bne.n	8003738 <memchr+0x8>
 800374a:	bd10      	pop	{r4, pc}

0800374c <memcpy>:
 800374c:	440a      	add	r2, r1
 800374e:	4291      	cmp	r1, r2
 8003750:	f100 33ff 	add.w	r3, r0, #4294967295
 8003754:	d100      	bne.n	8003758 <memcpy+0xc>
 8003756:	4770      	bx	lr
 8003758:	b510      	push	{r4, lr}
 800375a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800375e:	4291      	cmp	r1, r2
 8003760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003764:	d1f9      	bne.n	800375a <memcpy+0xe>
 8003766:	bd10      	pop	{r4, pc}

08003768 <memmove>:
 8003768:	4288      	cmp	r0, r1
 800376a:	b510      	push	{r4, lr}
 800376c:	eb01 0402 	add.w	r4, r1, r2
 8003770:	d902      	bls.n	8003778 <memmove+0x10>
 8003772:	4284      	cmp	r4, r0
 8003774:	4623      	mov	r3, r4
 8003776:	d807      	bhi.n	8003788 <memmove+0x20>
 8003778:	1e43      	subs	r3, r0, #1
 800377a:	42a1      	cmp	r1, r4
 800377c:	d008      	beq.n	8003790 <memmove+0x28>
 800377e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003786:	e7f8      	b.n	800377a <memmove+0x12>
 8003788:	4601      	mov	r1, r0
 800378a:	4402      	add	r2, r0
 800378c:	428a      	cmp	r2, r1
 800378e:	d100      	bne.n	8003792 <memmove+0x2a>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800379a:	e7f7      	b.n	800378c <memmove+0x24>

0800379c <_free_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4605      	mov	r5, r0
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d040      	beq.n	8003826 <_free_r+0x8a>
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f0c      	subs	r4, r1, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfb8      	it	lt
 80037ae:	18e4      	addlt	r4, r4, r3
 80037b0:	f000 f910 	bl	80039d4 <__malloc_lock>
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <_free_r+0x8c>)
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	b933      	cbnz	r3, 80037c8 <_free_r+0x2c>
 80037ba:	6063      	str	r3, [r4, #4]
 80037bc:	6014      	str	r4, [r2, #0]
 80037be:	4628      	mov	r0, r5
 80037c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c4:	f000 b90c 	b.w	80039e0 <__malloc_unlock>
 80037c8:	42a3      	cmp	r3, r4
 80037ca:	d908      	bls.n	80037de <_free_r+0x42>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	1821      	adds	r1, r4, r0
 80037d0:	428b      	cmp	r3, r1
 80037d2:	bf01      	itttt	eq
 80037d4:	6819      	ldreq	r1, [r3, #0]
 80037d6:	685b      	ldreq	r3, [r3, #4]
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	e7ed      	b.n	80037ba <_free_r+0x1e>
 80037de:	461a      	mov	r2, r3
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b10b      	cbz	r3, 80037e8 <_free_r+0x4c>
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d9fa      	bls.n	80037de <_free_r+0x42>
 80037e8:	6811      	ldr	r1, [r2, #0]
 80037ea:	1850      	adds	r0, r2, r1
 80037ec:	42a0      	cmp	r0, r4
 80037ee:	d10b      	bne.n	8003808 <_free_r+0x6c>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	4401      	add	r1, r0
 80037f4:	1850      	adds	r0, r2, r1
 80037f6:	4283      	cmp	r3, r0
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	d1e0      	bne.n	80037be <_free_r+0x22>
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4401      	add	r1, r0
 8003802:	6011      	str	r1, [r2, #0]
 8003804:	6053      	str	r3, [r2, #4]
 8003806:	e7da      	b.n	80037be <_free_r+0x22>
 8003808:	d902      	bls.n	8003810 <_free_r+0x74>
 800380a:	230c      	movs	r3, #12
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	e7d6      	b.n	80037be <_free_r+0x22>
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	1821      	adds	r1, r4, r0
 8003814:	428b      	cmp	r3, r1
 8003816:	bf01      	itttt	eq
 8003818:	6819      	ldreq	r1, [r3, #0]
 800381a:	685b      	ldreq	r3, [r3, #4]
 800381c:	1809      	addeq	r1, r1, r0
 800381e:	6021      	streq	r1, [r4, #0]
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	6054      	str	r4, [r2, #4]
 8003824:	e7cb      	b.n	80037be <_free_r+0x22>
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	20000560 	.word	0x20000560

0800382c <sbrk_aligned>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	4e0e      	ldr	r6, [pc, #56]	; (8003868 <sbrk_aligned+0x3c>)
 8003830:	460c      	mov	r4, r1
 8003832:	6831      	ldr	r1, [r6, #0]
 8003834:	4605      	mov	r5, r0
 8003836:	b911      	cbnz	r1, 800383e <sbrk_aligned+0x12>
 8003838:	f000 f8bc 	bl	80039b4 <_sbrk_r>
 800383c:	6030      	str	r0, [r6, #0]
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 f8b7 	bl	80039b4 <_sbrk_r>
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d00a      	beq.n	8003860 <sbrk_aligned+0x34>
 800384a:	1cc4      	adds	r4, r0, #3
 800384c:	f024 0403 	bic.w	r4, r4, #3
 8003850:	42a0      	cmp	r0, r4
 8003852:	d007      	beq.n	8003864 <sbrk_aligned+0x38>
 8003854:	1a21      	subs	r1, r4, r0
 8003856:	4628      	mov	r0, r5
 8003858:	f000 f8ac 	bl	80039b4 <_sbrk_r>
 800385c:	3001      	adds	r0, #1
 800385e:	d101      	bne.n	8003864 <sbrk_aligned+0x38>
 8003860:	f04f 34ff 	mov.w	r4, #4294967295
 8003864:	4620      	mov	r0, r4
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	20000564 	.word	0x20000564

0800386c <_malloc_r>:
 800386c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003870:	1ccd      	adds	r5, r1, #3
 8003872:	f025 0503 	bic.w	r5, r5, #3
 8003876:	3508      	adds	r5, #8
 8003878:	2d0c      	cmp	r5, #12
 800387a:	bf38      	it	cc
 800387c:	250c      	movcc	r5, #12
 800387e:	2d00      	cmp	r5, #0
 8003880:	4607      	mov	r7, r0
 8003882:	db01      	blt.n	8003888 <_malloc_r+0x1c>
 8003884:	42a9      	cmp	r1, r5
 8003886:	d905      	bls.n	8003894 <_malloc_r+0x28>
 8003888:	230c      	movs	r3, #12
 800388a:	2600      	movs	r6, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003894:	4e2e      	ldr	r6, [pc, #184]	; (8003950 <_malloc_r+0xe4>)
 8003896:	f000 f89d 	bl	80039d4 <__malloc_lock>
 800389a:	6833      	ldr	r3, [r6, #0]
 800389c:	461c      	mov	r4, r3
 800389e:	bb34      	cbnz	r4, 80038ee <_malloc_r+0x82>
 80038a0:	4629      	mov	r1, r5
 80038a2:	4638      	mov	r0, r7
 80038a4:	f7ff ffc2 	bl	800382c <sbrk_aligned>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	4604      	mov	r4, r0
 80038ac:	d14d      	bne.n	800394a <_malloc_r+0xde>
 80038ae:	6834      	ldr	r4, [r6, #0]
 80038b0:	4626      	mov	r6, r4
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d140      	bne.n	8003938 <_malloc_r+0xcc>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	4631      	mov	r1, r6
 80038ba:	4638      	mov	r0, r7
 80038bc:	eb04 0803 	add.w	r8, r4, r3
 80038c0:	f000 f878 	bl	80039b4 <_sbrk_r>
 80038c4:	4580      	cmp	r8, r0
 80038c6:	d13a      	bne.n	800393e <_malloc_r+0xd2>
 80038c8:	6821      	ldr	r1, [r4, #0]
 80038ca:	3503      	adds	r5, #3
 80038cc:	1a6d      	subs	r5, r5, r1
 80038ce:	f025 0503 	bic.w	r5, r5, #3
 80038d2:	3508      	adds	r5, #8
 80038d4:	2d0c      	cmp	r5, #12
 80038d6:	bf38      	it	cc
 80038d8:	250c      	movcc	r5, #12
 80038da:	4638      	mov	r0, r7
 80038dc:	4629      	mov	r1, r5
 80038de:	f7ff ffa5 	bl	800382c <sbrk_aligned>
 80038e2:	3001      	adds	r0, #1
 80038e4:	d02b      	beq.n	800393e <_malloc_r+0xd2>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	442b      	add	r3, r5
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	e00e      	b.n	800390c <_malloc_r+0xa0>
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	1b52      	subs	r2, r2, r5
 80038f2:	d41e      	bmi.n	8003932 <_malloc_r+0xc6>
 80038f4:	2a0b      	cmp	r2, #11
 80038f6:	d916      	bls.n	8003926 <_malloc_r+0xba>
 80038f8:	1961      	adds	r1, r4, r5
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	6025      	str	r5, [r4, #0]
 80038fe:	bf18      	it	ne
 8003900:	6059      	strne	r1, [r3, #4]
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	bf08      	it	eq
 8003906:	6031      	streq	r1, [r6, #0]
 8003908:	5162      	str	r2, [r4, r5]
 800390a:	604b      	str	r3, [r1, #4]
 800390c:	4638      	mov	r0, r7
 800390e:	f104 060b 	add.w	r6, r4, #11
 8003912:	f000 f865 	bl	80039e0 <__malloc_unlock>
 8003916:	f026 0607 	bic.w	r6, r6, #7
 800391a:	1d23      	adds	r3, r4, #4
 800391c:	1af2      	subs	r2, r6, r3
 800391e:	d0b6      	beq.n	800388e <_malloc_r+0x22>
 8003920:	1b9b      	subs	r3, r3, r6
 8003922:	50a3      	str	r3, [r4, r2]
 8003924:	e7b3      	b.n	800388e <_malloc_r+0x22>
 8003926:	6862      	ldr	r2, [r4, #4]
 8003928:	42a3      	cmp	r3, r4
 800392a:	bf0c      	ite	eq
 800392c:	6032      	streq	r2, [r6, #0]
 800392e:	605a      	strne	r2, [r3, #4]
 8003930:	e7ec      	b.n	800390c <_malloc_r+0xa0>
 8003932:	4623      	mov	r3, r4
 8003934:	6864      	ldr	r4, [r4, #4]
 8003936:	e7b2      	b.n	800389e <_malloc_r+0x32>
 8003938:	4634      	mov	r4, r6
 800393a:	6876      	ldr	r6, [r6, #4]
 800393c:	e7b9      	b.n	80038b2 <_malloc_r+0x46>
 800393e:	230c      	movs	r3, #12
 8003940:	4638      	mov	r0, r7
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	f000 f84c 	bl	80039e0 <__malloc_unlock>
 8003948:	e7a1      	b.n	800388e <_malloc_r+0x22>
 800394a:	6025      	str	r5, [r4, #0]
 800394c:	e7de      	b.n	800390c <_malloc_r+0xa0>
 800394e:	bf00      	nop
 8003950:	20000560 	.word	0x20000560

08003954 <_realloc_r>:
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003958:	4680      	mov	r8, r0
 800395a:	4614      	mov	r4, r2
 800395c:	460e      	mov	r6, r1
 800395e:	b921      	cbnz	r1, 800396a <_realloc_r+0x16>
 8003960:	4611      	mov	r1, r2
 8003962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003966:	f7ff bf81 	b.w	800386c <_malloc_r>
 800396a:	b92a      	cbnz	r2, 8003978 <_realloc_r+0x24>
 800396c:	f7ff ff16 	bl	800379c <_free_r>
 8003970:	4625      	mov	r5, r4
 8003972:	4628      	mov	r0, r5
 8003974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003978:	f000 f838 	bl	80039ec <_malloc_usable_size_r>
 800397c:	4284      	cmp	r4, r0
 800397e:	4607      	mov	r7, r0
 8003980:	d802      	bhi.n	8003988 <_realloc_r+0x34>
 8003982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003986:	d812      	bhi.n	80039ae <_realloc_r+0x5a>
 8003988:	4621      	mov	r1, r4
 800398a:	4640      	mov	r0, r8
 800398c:	f7ff ff6e 	bl	800386c <_malloc_r>
 8003990:	4605      	mov	r5, r0
 8003992:	2800      	cmp	r0, #0
 8003994:	d0ed      	beq.n	8003972 <_realloc_r+0x1e>
 8003996:	42bc      	cmp	r4, r7
 8003998:	4622      	mov	r2, r4
 800399a:	4631      	mov	r1, r6
 800399c:	bf28      	it	cs
 800399e:	463a      	movcs	r2, r7
 80039a0:	f7ff fed4 	bl	800374c <memcpy>
 80039a4:	4631      	mov	r1, r6
 80039a6:	4640      	mov	r0, r8
 80039a8:	f7ff fef8 	bl	800379c <_free_r>
 80039ac:	e7e1      	b.n	8003972 <_realloc_r+0x1e>
 80039ae:	4635      	mov	r5, r6
 80039b0:	e7df      	b.n	8003972 <_realloc_r+0x1e>
	...

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	; (80039d0 <_sbrk_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fd fa28 	bl	8000e14 <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000568 	.word	0x20000568

080039d4 <__malloc_lock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__malloc_lock+0x8>)
 80039d6:	f000 b811 	b.w	80039fc <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	2000056c 	.word	0x2000056c

080039e0 <__malloc_unlock>:
 80039e0:	4801      	ldr	r0, [pc, #4]	; (80039e8 <__malloc_unlock+0x8>)
 80039e2:	f000 b80c 	b.w	80039fe <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	2000056c 	.word	0x2000056c

080039ec <_malloc_usable_size_r>:
 80039ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f0:	1f18      	subs	r0, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfbc      	itt	lt
 80039f6:	580b      	ldrlt	r3, [r1, r0]
 80039f8:	18c0      	addlt	r0, r0, r3
 80039fa:	4770      	bx	lr

080039fc <__retarget_lock_acquire_recursive>:
 80039fc:	4770      	bx	lr

080039fe <__retarget_lock_release_recursive>:
 80039fe:	4770      	bx	lr

08003a00 <_init>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr

08003a0c <_fini>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr
